{
  ":ungrouped": {},
  "BoxData": {
    "client": false,
    "comments": "A user manageable heap memory.",
    "fields": [
      {
        "client": false,
        "comments": "The size of the box.",
        "ignore": false,
        "kind": "field",
        "line": 196,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 196,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 197,
            "tag": "tag"
          },
          {
            "line": 198,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 199,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "BoxData"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 190,
    "methods": [
      {
        "client": false,
        "comments": "Fill the box with zero.",
        "ignore": false,
        "kind": "method",
        "line": 206,
        "name": "zero",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 206,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 207,
            "tag": "tag"
          },
          {
            "content": "zero\n",
            "line": 208,
            "tag": "method"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 212,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 212
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of the box after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
        "ignore": false,
        "kind": "method",
        "line": 216,
        "name": "leak",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 224,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 216,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 217,
            "tag": "tag"
          },
          {
            "content": "leak\n",
            "line": 218,
            "tag": "method"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 224,
            "tag": "param"
          },
          {
            "content": "A reference of the box\n",
            "line": 225,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the box\n",
            "line": 225
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of the box.\n\nThe created reference keeps the box from being garbage collected until the reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 229,
        "name": "ref",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 238,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 229,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 230,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 231,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 232,
            "tag": "tag"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 238,
            "tag": "param"
          },
          {
            "content": "A reference of the box\n",
            "line": 239,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the box\n",
            "line": 239
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy content from another data with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 243,
        "name": "copyFrom",
        "params": [
          {
            "description": "The source data\n",
            "line": 249,
            "name": "src"
          },
          {
            "description": "The amount of data to copy, in bytes\n",
            "line": 250,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 251,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 252,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 243,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 244,
            "tag": "tag"
          },
          {
            "content": "copyFrom\n",
            "line": 245,
            "tag": "method"
          },
          {
            "content": "src The source data\n",
            "line": 249,
            "tag": "param"
          },
          {
            "content": "length The amount of data to copy, in bytes\n",
            "line": 250,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 251,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 252,
            "tag": "param"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 253,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 253
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read string from data with specific length without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 263,
        "name": "readString",
        "params": [
          {
            "description": "The amount of data to read, in bytes\n",
            "line": 270,
            "name": "length"
          },
          {
            "description": "Offset to read string from\n",
            "line": 271,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 263,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 264,
            "tag": "tag"
          },
          {
            "content": "readString\n",
            "line": 265,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 266,
            "tag": "tag"
          },
          {
            "content": "length The amount of data to read, in bytes\n",
            "line": 270,
            "tag": "param"
          },
          {
            "content": "offset Offset to read string from\n",
            "line": 271,
            "tag": "param"
          },
          {
            "content": "A string\n",
            "line": 272,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A string\n",
            "line": 272
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write string into data without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 276,
        "name": "writeString",
        "params": [
          {
            "description": "The source string\n",
            "line": 282,
            "name": "src"
          },
          {
            "description": "The amount of data to write, in bytes\n",
            "line": 283,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 284,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source string from where the content will be copied\n",
            "line": 285,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 276,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 277,
            "tag": "tag"
          },
          {
            "content": "writeString\n",
            "line": 278,
            "tag": "method"
          },
          {
            "content": "src The source string\n",
            "line": 282,
            "tag": "param"
          },
          {
            "content": "length The amount of data to write, in bytes\n",
            "line": 283,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 284,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source string from where the content will be copied\n",
            "line": 285,
            "tag": "param"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 286,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 286
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      }
    ],
    "name": "BoxData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "BoxData\n",
        "line": 190,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "BoxData"
  },
  "C": {
    "client": false,
    "comments": "Namespace for compile time sized c types.",
    "functions": [
      {
        "client": false,
        "comments": "Create a function signature type information.",
        "ignore": false,
        "kind": "function",
        "line": 1203,
        "name": "fn",
        "params": [
          {
            "description": "An array of CTypes represents the arguments of the function\n",
            "line": 1208,
            "name": "args"
          },
          {
            "description": "The return type of the function\n",
            "line": 1209,
            "name": "ret"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "C\n",
            "line": 1203,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1204,
            "tag": "tag"
          },
          {
            "content": "args An array of CTypes represents the arguments of the function\n",
            "line": 1208,
            "tag": "param"
          },
          {
            "content": "ret The return type of the function\n",
            "line": 1209,
            "tag": "param"
          },
          {
            "content": "A function signature type information\n",
            "line": 1210,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A function signature type information\n",
            "line": 1210
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "C",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a struct type information.",
        "ignore": false,
        "kind": "function",
        "line": 1217,
        "name": "struct",
        "params": [
          {
            "description": "An array of CTypes represents the fields of the struct\n",
            "line": 1222,
            "name": "fields"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "C\n",
            "line": 1217,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1218,
            "tag": "tag"
          },
          {
            "content": "fields An array of CTypes represents the fields of the struct\n",
            "line": 1222,
            "tag": "param"
          },
          {
            "content": "A struct type information\n",
            "line": 1223,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A struct type information\n",
            "line": 1223
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "C",
        "yields": false
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 47,
    "name": "C",
    "plugin": false,
    "private": false,
    "props": [
      {
        "client": false,
        "comments": "Compiler defined C `char` type.\n\nThe signedness may differ depending on the compiler and platform.\n\nYou can get signedness by `signedness` field.",
        "ignore": false,
        "kind": "prop",
        "line": 1062,
        "name": "char",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "char CTypeInfo\n",
            "line": 1062,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1063,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned char` type.\n\nMostly equivalent to `u8`.",
        "ignore": false,
        "kind": "prop",
        "line": 1074,
        "name": "uchar",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "uchar CTypeInfo\n",
            "line": 1074,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1075,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `signed char` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1084,
        "name": "schar",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "schar CTypeInfo\n",
            "line": 1084,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1085,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `short` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1092,
        "name": "short",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "short CTypeInfo\n",
            "line": 1092,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1093,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned short` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1100,
        "name": "ushort",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ushort CTypeInfo\n",
            "line": 1100,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1101,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `int` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1108,
        "name": "int",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "int CTypeInfo\n",
            "line": 1108,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1109,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned int` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1118,
        "name": "uint",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "uint CTypeInfo\n",
            "line": 1118,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1119,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `long` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1128,
        "name": "long",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "long CTypeInfo\n",
            "line": 1128,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1129,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned long` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1138,
        "name": "ulong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ulong CTypeInfo\n",
            "line": 1138,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1139,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned longlong` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1148,
        "name": "longlong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "longlong CTypeInfo\n",
            "line": 1148,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1149,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned longlong` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1156,
        "name": "longlong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "longlong CTypeInfo\n",
            "line": 1156,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1157,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "C"
      }
    ],
    "raw_tags": [
      {
        "content": "C\n",
        "line": 47,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "C"
  },
  "CArrInfo": {
    "client": false,
    "comments": "A c sized array type information. It can be used for sturct field.\n\nFor function arguments, use CPtr instead.",
    "fields": [
      {
        "client": false,
        "comments": "The total size of the array in bytes.",
        "ignore": false,
        "kind": "field",
        "line": 616,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 616,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 617,
            "tag": "tag"
          },
          {
            "line": 618,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 619,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      },
      {
        "client": false,
        "comments": "The length of the array.",
        "ignore": false,
        "kind": "field",
        "line": 625,
        "name": "length",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 625,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 626,
            "tag": "tag"
          },
          {
            "line": 627,
            "tag": "readonly"
          },
          {
            "content": "length\n",
            "line": 628,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      },
      {
        "client": false,
        "comments": "The inner element type of the array.",
        "ignore": false,
        "kind": "field",
        "line": 634,
        "name": "inner",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 634,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 635,
            "tag": "tag"
          },
          {
            "line": 636,
            "tag": "readonly"
          },
          {
            "content": "inner\n",
            "line": 637,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 608,
    "methods": [
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 645,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 645,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 646,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 647,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 648,
            "tag": "tag"
          },
          {
            "content": "A pointer subtype\n",
            "line": 652,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 652
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial values.",
        "ignore": false,
        "kind": "method",
        "line": 658,
        "name": "box",
        "params": [
          {
            "description": "The array of field values\n",
            "line": 665,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 658,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 659,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 660,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 661,
            "tag": "tag"
          },
          {
            "content": "table The array of field values\n",
            "line": 665,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 666,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 666
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua table from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 670,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 677,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 678,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 670,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 671,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 672,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 673,
            "tag": "tag"
          },
          {
            "content": "target Target to read data from\n",
            "line": 677,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 678,
            "tag": "param"
          },
          {
            "content": "A table\n",
            "line": 679,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A table\n",
            "line": 679
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua table into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 683,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 690,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 691,
            "name": "table"
          },
          {
            "description": "Offset to write data into\n",
            "line": 692,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 683,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 684,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 685,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 686,
            "tag": "tag"
          },
          {
            "content": "target Target to write data into\n",
            "line": 690,
            "tag": "param"
          },
          {
            "content": "table Lua data to write\n",
            "line": 691,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 692,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 701,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 707,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 708,
            "name": "src"
          },
          {
            "description": "The offset in the dst where the content will be pasted\n",
            "line": 709,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 710,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 701,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 702,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 703,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 707,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 708,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the dst where the content will be pasted\n",
            "line": 709,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 710,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the byte offset of the field.",
        "ignore": false,
        "kind": "method",
        "line": 722,
        "name": "offset",
        "params": [
          {
            "description": "The element index\n",
            "line": 729,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 722,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 723,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 724,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 725,
            "tag": "tag"
          },
          {
            "content": "index The element index\n",
            "line": 729,
            "tag": "param"
          },
          {
            "content": "The byte offset\n",
            "line": 730,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The byte offset\n",
            "line": 730
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      }
    ],
    "name": "CArrInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CArrInfo\n",
        "line": 608,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CArrInfo"
  },
  "CFnInfo": {
    "client": false,
    "comments": "A C function pointer type information, with function signature.\n\nFor struct field, array element, or function arguments, use `void:ptr()` instead.",
    "fields": [
      {
        "client": false,
        "comments": "The size of a function pointer.\n\nEquivalent to `ffi.c.usize.size`.",
        "ignore": false,
        "kind": "field",
        "line": 744,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 744,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 745,
            "tag": "tag"
          },
          {
            "line": 746,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 747,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CFnInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 736,
    "methods": [
      {
        "client": false,
        "comments": "Create a callable from reference.",
        "ignore": false,
        "kind": "method",
        "line": 757,
        "name": "callable",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 757,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 758,
            "tag": "tag"
          },
          {
            "content": "callable\n",
            "line": 759,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 760,
            "tag": "tag"
          },
          {
            "content": "A callable\n",
            "line": 764,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A callable\n",
            "line": 764
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CFnInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a closure from lua function.\n\nTo return some data, lua function should write value into ret reference.",
        "ignore": false,
        "kind": "method",
        "line": 768,
        "name": "closure",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 768,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 769,
            "tag": "tag"
          },
          {
            "content": "closure\n",
            "line": 770,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 771,
            "tag": "tag"
          },
          {
            "content": "A closure\n",
            "line": 777,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A closure\n",
            "line": 777
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CFnInfo",
        "yields": false
      }
    ],
    "name": "CFnInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CFnInfo\n",
        "line": 736,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CFnInfo"
  },
  "CPtrInfo": {
    "client": false,
    "comments": "A c pointer type information.",
    "fields": [
      {
        "client": false,
        "comments": "The size of a pointer. should be the same for all pointers.\n\nEquivalent to `ffi.c.usize.size`.",
        "ignore": false,
        "kind": "field",
        "line": 514,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 514,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 515,
            "tag": "tag"
          },
          {
            "line": 516,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 517,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo"
      },
      {
        "client": false,
        "comments": "The inner type of the pointer.",
        "ignore": false,
        "kind": "field",
        "line": 525,
        "name": "inner",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 525,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 526,
            "tag": "tag"
          },
          {
            "line": 527,
            "tag": "readonly"
          },
          {
            "content": "inner\n",
            "line": 528,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 508,
    "methods": [
      {
        "client": false,
        "comments": "Create an array subtype with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 537,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 544,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 537,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 538,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 539,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 540,
            "tag": "tag"
          },
          {
            "content": "length The length of the array\n",
            "line": 544,
            "tag": "param"
          },
          {
            "content": "An array subtype\n",
            "line": 545,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "An array subtype\n",
            "line": 545
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 550,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 550,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 551,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 552,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 553,
            "tag": "tag"
          },
          {
            "content": "A pointer subtype\n",
            "line": 557,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 557
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read address from data, then return RefData.\n\nUseful when reading pointer fields of structures.\n\nIf the `ref` argument is given, rather than create new RefData, update it.",
        "ignore": false,
        "kind": "method",
        "line": 563,
        "name": "readRef",
        "params": [
          {
            "description": "Target data to read address from\n",
            "line": 574,
            "name": "target"
          },
          {
            "description": "Offset to read address from\n",
            "line": 575,
            "name": "offset"
          },
          {
            "description": "RefData to update\n",
            "line": 576,
            "name": "ref"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 563,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 564,
            "tag": "tag"
          },
          {
            "content": "readRef\n",
            "line": 565,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 566,
            "tag": "tag"
          },
          {
            "content": "target Target data to read address from\n",
            "line": 574,
            "tag": "param"
          },
          {
            "content": "offset Offset to read address from\n",
            "line": 575,
            "tag": "param"
          },
          {
            "content": "ref RefData to update\n",
            "line": 576,
            "tag": "param"
          },
          {
            "content": "A lua value\n",
            "line": 577,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A lua value\n",
            "line": 577
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write address to data.\n\t\nUseful when writing pointer fields of structures.",
        "ignore": false,
        "kind": "method",
        "line": 586,
        "name": "writeRef",
        "params": [
          {
            "description": "Target data to write address into\n",
            "line": 595,
            "name": "target"
          },
          {
            "description": "Memory address to write\n",
            "line": 596,
            "name": "ref"
          },
          {
            "description": "Offset to write address into\n",
            "line": 597,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 586,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 587,
            "tag": "tag"
          },
          {
            "content": "writeRef\n",
            "line": 588,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 589,
            "tag": "tag"
          },
          {
            "content": "target Target data to write address into\n",
            "line": 595,
            "tag": "param"
          },
          {
            "content": "ref Memory address to write\n",
            "line": 596,
            "tag": "param"
          },
          {
            "content": "offset Offset to write address into\n",
            "line": 597,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      }
    ],
    "name": "CPtrInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CPtrInfo\n",
        "line": 508,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CPtrInfo"
  },
  "CStructInfo": {
    "client": false,
    "comments": "A c struct type information.",
    "fields": [
      {
        "client": false,
        "comments": "The size of a struct, including padding.",
        "ignore": false,
        "kind": "field",
        "line": 789,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CStructInfo\n",
            "line": 789,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 790,
            "tag": "tag"
          },
          {
            "line": 791,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 792,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CStructInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 783,
    "name": "CStructInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CStructInfo\n",
        "line": 783,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CStructInfo"
  },
  "CSturctInfo": {
    "methods": [
      {
        "client": false,
        "comments": "Create a struct array type.",
        "ignore": false,
        "kind": "method",
        "line": 800,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 807,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 800,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 801,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 802,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 803,
            "tag": "tag"
          },
          {
            "content": "length The length of the array\n",
            "line": 807,
            "tag": "param"
          },
          {
            "content": "A struct array type\n",
            "line": 808,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A struct array type\n",
            "line": 808
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a struct pointer type.",
        "ignore": false,
        "kind": "method",
        "line": 812,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 812,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 813,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 814,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 815,
            "tag": "tag"
          },
          {
            "content": "A struct pointer type\n",
            "line": 819,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A struct pointer type\n",
            "line": 819
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial value.",
        "ignore": false,
        "kind": "method",
        "line": 825,
        "name": "box",
        "params": [
          {
            "description": "The array of field values\n",
            "line": 832,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 825,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 826,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 827,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 828,
            "tag": "tag"
          },
          {
            "content": "table The array of field values\n",
            "line": 832,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 833,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 833
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua table from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 837,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 844,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 845,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 837,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 838,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 839,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 840,
            "tag": "tag"
          },
          {
            "content": "target Target to read data from\n",
            "line": 844,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 845,
            "tag": "param"
          },
          {
            "content": "A table\n",
            "line": 846,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A table\n",
            "line": 846
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua table into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 850,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 856,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 857,
            "name": "table"
          },
          {
            "description": "Offset to write data into\n",
            "line": 858,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 850,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 851,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 852,
            "tag": "method"
          },
          {
            "content": "target Target to write data into\n",
            "line": 856,
            "tag": "param"
          },
          {
            "content": "table Lua data to write\n",
            "line": 857,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 858,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 867,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 873,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 874,
            "name": "src"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 875,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 876,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 867,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 868,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 869,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 873,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 874,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 875,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 876,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the field offset.",
        "ignore": false,
        "kind": "method",
        "line": 888,
        "name": "offset",
        "params": [
          {
            "description": "The field index\n",
            "line": 895,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 888,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 889,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 890,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 891,
            "tag": "tag"
          },
          {
            "content": "index The field index\n",
            "line": 895,
            "tag": "param"
          },
          {
            "content": "The byte offset\n",
            "line": 896,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The byte offset\n",
            "line": 896
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the field type.",
        "ignore": false,
        "kind": "method",
        "line": 900,
        "name": "field",
        "params": [
          {
            "description": "The field index\n",
            "line": 907,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 900,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 901,
            "tag": "tag"
          },
          {
            "content": "field\n",
            "line": 902,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 903,
            "tag": "tag"
          },
          {
            "content": "index The field index\n",
            "line": 907,
            "tag": "param"
          },
          {
            "content": "The field type\n",
            "line": 908,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The field type\n",
            "line": 908
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      }
    ]
  },
  "CTypeInfo": {
    "client": false,
    "comments": "A c numbric type information.",
    "fields": [
      {
        "client": false,
        "comments": "The size of the type in bytes.",
        "ignore": false,
        "kind": "field",
        "line": 365,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 365,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 366,
            "tag": "tag"
          },
          {
            "line": 367,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 368,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo"
      },
      {
        "client": false,
        "comments": "The signedness of the type.",
        "ignore": false,
        "kind": "field",
        "line": 374,
        "name": "signedness",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 374,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 375,
            "tag": "tag"
          },
          {
            "line": 376,
            "tag": "readonly"
          },
          {
            "content": "signedness\n",
            "line": 377,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 359,
    "methods": [
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 385,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 385,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 386,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 387,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 388,
            "tag": "tag"
          },
          {
            "content": "A pointer subtype\n",
            "line": 392,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 392
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create an array subtype with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 396,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 403,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 396,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 397,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 398,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 399,
            "tag": "tag"
          },
          {
            "content": "length The length of the array\n",
            "line": 403,
            "tag": "param"
          },
          {
            "content": "An array subtype\n",
            "line": 404,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "An array subtype\n",
            "line": 404
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial values.",
        "ignore": false,
        "kind": "method",
        "line": 410,
        "name": "box",
        "params": [
          {
            "description": "The array of element values\n",
            "line": 417,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 410,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 411,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 412,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 413,
            "tag": "tag"
          },
          {
            "content": "table The array of element values\n",
            "line": 417,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 418,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 418
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua value from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 422,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 429,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 430,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 422,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 423,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 424,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 425,
            "tag": "tag"
          },
          {
            "content": "target Target to read data from\n",
            "line": 429,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 430,
            "tag": "param"
          },
          {
            "content": "A lua value\n",
            "line": 431,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A lua value\n",
            "line": 431
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua value into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 435,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 441,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 442,
            "name": "value"
          },
          {
            "description": "Offset to write data into\n",
            "line": 443,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 435,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 436,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 437,
            "tag": "method"
          },
          {
            "content": "target Target to write data into\n",
            "line": 441,
            "tag": "param"
          },
          {
            "content": "value Lua data to write\n",
            "line": 442,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 443,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 447,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 453,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 454,
            "name": "src"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 455,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 456,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 447,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 448,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 449,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 453,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 454,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 455,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 456,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Stringify data. Useful when output numbers, which Luau can't handle.",
        "ignore": false,
        "kind": "method",
        "line": 466,
        "name": "stringifyData",
        "params": [
          {
            "description": "The target data\n",
            "line": 473,
            "name": "target"
          },
          {
            "description": "Offset to stringify data from\n",
            "line": 474,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 466,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 467,
            "tag": "tag"
          },
          {
            "content": "stringifyData\n",
            "line": 468,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 469,
            "tag": "tag"
          },
          {
            "content": "target The target data\n",
            "line": 473,
            "tag": "param"
          },
          {
            "content": "offset Offset to stringify data from\n",
            "line": 474,
            "tag": "param"
          },
          {
            "content": "A stringified data\n",
            "line": 475,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A stringified data\n",
            "line": 475
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Casting data to different type.\n\nMay result in loss of precision.",
        "ignore": false,
        "kind": "method",
        "line": 482,
        "name": "cast",
        "params": [
          {
            "description": "The target type to convert to\n",
            "line": 490,
            "name": "intoType"
          },
          {
            "description": "Source data to be converted\n",
            "line": 491,
            "name": "fromData"
          },
          {
            "description": "Target to write converted data into\n",
            "line": 492,
            "name": "intoData"
          },
          {
            "description": "The offset in the source data\n",
            "line": 493,
            "name": "fromOffset"
          },
          {
            "description": "The offset in the destination\n",
            "line": 494,
            "name": "intoOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 482,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 483,
            "tag": "tag"
          },
          {
            "content": "cast\n",
            "line": 484,
            "tag": "method"
          },
          {
            "content": "intoType The target type to convert to\n",
            "line": 490,
            "tag": "param"
          },
          {
            "content": "fromData Source data to be converted\n",
            "line": 491,
            "tag": "param"
          },
          {
            "content": "intoData Target to write converted data into\n",
            "line": 492,
            "tag": "param"
          },
          {
            "content": "fromOffset The offset in the source data\n",
            "line": 493,
            "tag": "param"
          },
          {
            "content": "intoOffset The offset in the destination\n",
            "line": 494,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      }
    ],
    "name": "CTypeInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CTypeInfo\n",
        "line": 359,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CTypeInfo"
  },
  "CTypes": {
    "client": false,
    "comments": "All possible C types.",
    "ignore": false,
    "kind": "class",
    "line": 1166,
    "name": "CTypes",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CTypes\n",
        "line": 1166,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CTypes"
  },
  "CVoidInfo": {
    "client": false,
    "comments": "A type that represents c void. can only be used for the function return type.",
    "fields": [
      {
        "client": false,
        "comments": "The size of the void type. It is always 0.",
        "ignore": false,
        "kind": "field",
        "line": 920,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CVoidInfo\n",
            "line": 920,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 921,
            "tag": "tag"
          },
          {
            "line": 922,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 923,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CVoidInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 914,
    "methods": [
      {
        "client": false,
        "comments": "Create a generic pointer type.",
        "ignore": false,
        "kind": "method",
        "line": 931,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CVoidInfo\n",
            "line": 931,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 932,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 933,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 934,
            "tag": "tag"
          },
          {
            "content": "Generic pointer type, equivalent to `*void` in C.\n",
            "line": 938,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "Generic pointer type, equivalent to `*void` in C.\n",
            "line": 938
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "CVoidInfo",
        "yields": false
      }
    ],
    "name": "CVoidInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CVoidInfo\n",
        "line": 914,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CVoidInfo"
  },
  "CallableData": {
    "client": false,
    "comments": "A callable external function.\n\nTo call external function, provide memory for save the return value and references for the arguments.\n\nIf return type is `void`, pass `nil`.",
    "ignore": false,
    "kind": "class",
    "line": 318,
    "name": "CallableData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CallableData\n",
        "line": 318,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CallableData"
  },
  "ClosureData": {
    "client": false,
    "comments": "A reference that holds lua function.",
    "ignore": false,
    "kind": "class",
    "line": 335,
    "methods": [
      {
        "client": false,
        "comments": "Create a reference of the closure. usually can be used for passing function pointer as argument.\n\nThe created reference keeps the closure from being garbage collected until the reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 341,
        "name": "ref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ClosureData\n",
            "line": 341,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 342,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 343,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 344,
            "tag": "tag"
          },
          {
            "content": "A reference of the closure\n",
            "line": 350,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the closure\n",
            "line": 350
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "ClosureData",
        "yields": false
      }
    ],
    "name": "ClosureData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "ClosureData\n",
        "line": 335,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "ClosureData"
  },
  "FFI": {
    "client": false,
    "comments": "> Note: **This library is technical preview**, not completed yet. Behaviors can be changed in future.\n\nBuilt-in library for foreign function interface.\n\n### Example usage\nlib.c:\n```c\nint add(int a, int b) {\n\treturn a + b;\n}\n```\ninit.luau:\n```lua\nlocal ffi = require(\"@lune/ffi\")\n\n-- Create function signature\nlocal addSignature = ffi.c.fn({ ffi.c.int, ffi.c.int }, ffi.c.int)\n\n-- Load library\nlocal lib = ffi.open(\"./lib.so\")\n\n-- Get symbol from library\nlocal addSymbol = lib:find(\"add\")\n\n-- Create CallableData\nlocal add = addSignature:callable(addSymbol)\n\n-- Create result box and arguments\nlocal result = ffi.box(ffi.c.int.size)\nlocal a = ffi.c.int:box(1)\nlocal b = ffi.c.int:box(2)\n\n-- Call external function\nadd(result, a:ref(), b:ref())\n\n-- Get number from result\nprint(ffi.c.int:readData(result))\n```",
    "functions": [
      {
        "client": false,
        "comments": "Create a `Ref` with address 0.\n\nCan be used for receive a pointer from external function or pass it as an argument.",
        "ignore": false,
        "kind": "function",
        "line": 1230,
        "name": "nullRef",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1230,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1231,
            "tag": "tag"
          },
          {
            "content": "A zero initialized Ref\n",
            "line": 1237,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A zero initialized Ref\n",
            "line": 1237
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "FFI",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a `Box` with specific size.\nThe created box is not filed with zero.",
        "ignore": false,
        "kind": "function",
        "line": 1244,
        "name": "box",
        "params": [
          {
            "description": "The size of the new box\n",
            "line": 1250,
            "name": "size"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1244,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1245,
            "tag": "tag"
          },
          {
            "content": "size The size of the new box\n",
            "line": 1250,
            "tag": "param"
          },
          {
            "content": "A allocated box\n",
            "line": 1251,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A allocated box\n",
            "line": 1251
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "FFI",
        "yields": false
      },
      {
        "client": false,
        "comments": "Open a dynamic library.",
        "ignore": false,
        "kind": "function",
        "line": 1258,
        "name": "open",
        "params": [
          {
            "description": "The name of the target library\n",
            "line": 1263,
            "name": "name"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1258,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1259,
            "tag": "tag"
          },
          {
            "content": "name The name of the target library\n",
            "line": 1263,
            "tag": "param"
          },
          {
            "content": "A dynamic library handle\n",
            "line": 1264,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A dynamic library handle\n",
            "line": 1264
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "FFI",
        "yields": false
      },
      {
        "client": false,
        "comments": "Return `true` if the second argument is an integer (i32).",
        "ignore": false,
        "kind": "function",
        "line": 1271,
        "name": "isInteger",
        "params": [
          {
            "description": "A lua value to check\n",
            "line": 1276,
            "name": "val"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1271,
            "tag": "within"
          },
          {
            "content": "must_use\n",
            "line": 1272,
            "tag": "tag"
          },
          {
            "content": "val A lua value to check\n",
            "line": 1276,
            "tag": "param"
          },
          {
            "content": "Whether val is an integer or not\n",
            "line": 1277,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "Whether val is an integer or not\n",
            "line": 1277
          }
        ],
        "server": false,
        "tags": [
          "must_use\n"
        ],
        "unreleased": false,
        "within": "FFI",
        "yields": false
      },
      {
        "client": false,
        "comments": "Free referenced memory.",
        "ignore": false,
        "kind": "function",
        "line": 1284,
        "name": "free",
        "params": [
          {
            "description": "Target memory to free\n",
            "line": 1288,
            "name": "data"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1284,
            "tag": "within"
          },
          {
            "content": "data Target memory to free\n",
            "line": 1288,
            "tag": "param"
          }
        ],
        "server": false,
        "unreleased": false,
        "within": "FFI",
        "yields": false
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 2,
    "name": "FFI",
    "plugin": false,
    "private": false,
    "props": [
      {
        "client": false,
        "comments": "Namespace for compile time sized c types.",
        "ignore": false,
        "kind": "prop",
        "line": 54,
        "name": "C",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "C C\n",
            "line": 54,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 55,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "C",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 8-bit sized unsigned integer, Equivalent to `uint8_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 947,
        "name": "u8",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u8 CTypeInfo\n",
            "line": 947,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 948,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 16-bit sized unsigned integer, Equivalent to `uint16_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 955,
        "name": "u16",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u16 CTypeInfo\n",
            "line": 955,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 956,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 32-bit sized unsigned integer, Equivalent to `uint32_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 963,
        "name": "u32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u32 CTypeInfo\n",
            "line": 963,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 964,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 64-bit sized unsigned integer, Equivalent to `uint64_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 971,
        "name": "u64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u64 CTypeInfo\n",
            "line": 971,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 972,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 128-bit sized unsigned integer, Equivalent to `uint128_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 979,
        "name": "u128",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u128 CTypeInfo\n",
            "line": 979,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 980,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 8-bit sized signed integer, Equivalent to `int8_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 987,
        "name": "i8",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i8 CTypeInfo\n",
            "line": 987,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 988,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 16-bit sized signed integer, Equivalent to `int16_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 995,
        "name": "i16",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i16 CTypeInfo\n",
            "line": 995,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 996,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 32-bit sized signed integer, Equivalent to `int32_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 1003,
        "name": "i32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i32 CTypeInfo\n",
            "line": 1003,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1004,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 64-bit sized signed integer, Equivalent to `int64_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 1011,
        "name": "i64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i64 CTypeInfo\n",
            "line": 1011,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1012,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 128-bit sized signed integer, Equivalent to `int128_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 1019,
        "name": "i128",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i128 CTypeInfo\n",
            "line": 1019,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1020,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A single-precision 32-bit sized floating-point, Almost always equivalent to `float` in C.",
        "ignore": false,
        "kind": "prop",
        "line": 1027,
        "name": "f32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "f32 CTypeInfo\n",
            "line": 1027,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1028,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A double-precision 64-bit sized floating-point, Almost always equivalent to `double` in C.",
        "ignore": false,
        "kind": "prop",
        "line": 1035,
        "name": "f64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "f64 CTypeInfo\n",
            "line": 1035,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1036,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A machine specific pointer sized unsigned integer.",
        "ignore": false,
        "kind": "prop",
        "line": 1043,
        "name": "usize",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "usize CTypeInfo\n",
            "line": 1043,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1044,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A machine specific pointer sized signed integer.",
        "ignore": false,
        "kind": "prop",
        "line": 1051,
        "name": "isize",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "isize CTypeInfo\n",
            "line": 1051,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1052,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "CTypeInfo",
        "unreleased": false,
        "within": "FFI"
      }
    ],
    "raw_tags": [
      {
        "content": "FFI\n",
        "line": 2,
        "tag": "class"
      },
      {
        "line": 3,
        "tag": "unreleased"
      }
    ],
    "server": false,
    "unreleased": true,
    "within": "FFI"
  },
  "LibData": {
    "client": false,
    "comments": "A dynamic opened library handle.",
    "ignore": false,
    "kind": "class",
    "line": 298,
    "methods": [
      {
        "client": false,
        "comments": "Find a symbol from the dynamic library.",
        "ignore": false,
        "kind": "method",
        "line": 304,
        "name": "find",
        "params": [
          {
            "description": "The name of the symbol\n",
            "line": 311,
            "name": "sym"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "LibData\n",
            "line": 304,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 305,
            "tag": "tag"
          },
          {
            "content": "find\n",
            "line": 306,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 307,
            "tag": "tag"
          },
          {
            "content": "sym The name of the symbol\n",
            "line": 311,
            "tag": "param"
          },
          {
            "content": "A `Ref` of the found symbol\n",
            "line": 312,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A `Ref` of the found symbol\n",
            "line": 312
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "LibData",
        "yields": false
      }
    ],
    "name": "LibData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "LibData\n",
        "line": 298,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "LibData"
  },
  "RefData": {
    "client": false,
    "comments": "A user manageable memory reference.\n\nIt can be GCed, But it doesn't free the referenced memory.",
    "ignore": false,
    "kind": "class",
    "line": 63,
    "methods": [
      {
        "client": false,
        "comments": "Create a RefData by dereference this reference.\nThe created reference has no boundaries and has no restrictions.\n\nThis method is unsafe.",
        "ignore": false,
        "kind": "method",
        "line": 71,
        "name": "deref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 71,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 72,
            "tag": "tag"
          },
          {
            "content": "deref\n",
            "line": 73,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 74,
            "tag": "tag"
          },
          {
            "content": "A dereferenced `RefData`\n",
            "line": 81,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A dereferenced `RefData`\n",
            "line": 81
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference with specific offset from this reference.\n\nThe created reference can be GCed and holds same data.",
        "ignore": false,
        "kind": "method",
        "line": 85,
        "name": "offset",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 94,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 85,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 86,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 87,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 88,
            "tag": "tag"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 94,
            "tag": "param"
          },
          {
            "content": "A offseted reference\n",
            "line": 95,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A offseted reference\n",
            "line": 95
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of this reference.\n\nThe created reference keeps the target reference from being garbage collected until created reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 99,
        "name": "ref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 99,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 100,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 101,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 102,
            "tag": "tag"
          },
          {
            "content": "A reference of this reference\n",
            "line": 108,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of this reference\n",
            "line": 108
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of this reference after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
        "ignore": false,
        "kind": "method",
        "line": 112,
        "name": "leak",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 112,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 113,
            "tag": "tag"
          },
          {
            "content": "leak\n",
            "line": 114,
            "tag": "method"
          },
          {
            "content": "A reference of this reference\n",
            "line": 120,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of this reference\n",
            "line": 120
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Check reference is null or not.",
        "ignore": false,
        "kind": "method",
        "line": 124,
        "name": "isNull",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 124,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 125,
            "tag": "tag"
          },
          {
            "content": "isNull\n",
            "line": 126,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 127,
            "tag": "tag"
          },
          {
            "content": "Whether reference is null or not\n",
            "line": 131,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "Whether reference is null or not\n",
            "line": 131
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy content from another data with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 135,
        "name": "copyFrom",
        "params": [
          {
            "description": "The source data\n",
            "line": 141,
            "name": "src"
          },
          {
            "description": "The amount of data to copy, in bytes\n",
            "line": 142,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 143,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 144,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 135,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 136,
            "tag": "tag"
          },
          {
            "content": "copyFrom\n",
            "line": 137,
            "tag": "method"
          },
          {
            "content": "src The source data\n",
            "line": 141,
            "tag": "param"
          },
          {
            "content": "length The amount of data to copy, in bytes\n",
            "line": 142,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 143,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 144,
            "tag": "param"
          },
          {
            "content": "`RefData` itself for convenience\n",
            "line": 145,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`RefData` itself for convenience\n",
            "line": 145
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read string from data with specific length without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 155,
        "name": "readString",
        "params": [
          {
            "description": "The amount of data to read, in bytes\n",
            "line": 162,
            "name": "length"
          },
          {
            "description": "Offset to read string from\n",
            "line": 163,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 155,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 156,
            "tag": "tag"
          },
          {
            "content": "readString\n",
            "line": 157,
            "tag": "method"
          },
          {
            "content": "must_use\n",
            "line": 158,
            "tag": "tag"
          },
          {
            "content": "length The amount of data to read, in bytes\n",
            "line": 162,
            "tag": "param"
          },
          {
            "content": "offset Offset to read string from\n",
            "line": 163,
            "tag": "param"
          },
          {
            "content": "A string\n",
            "line": 164,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A string\n",
            "line": 164
          }
        ],
        "server": false,
        "tags": [
          "Method\n",
          "must_use\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write string into data without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 168,
        "name": "writeString",
        "params": [
          {
            "description": "The source string\n",
            "line": 174,
            "name": "src"
          },
          {
            "description": "The amount of data to write, in bytes\n",
            "line": 175,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 176,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source string from where the content will be copied\n",
            "line": 177,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 168,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 169,
            "tag": "tag"
          },
          {
            "content": "writeString\n",
            "line": 170,
            "tag": "method"
          },
          {
            "content": "src The source string\n",
            "line": 174,
            "tag": "param"
          },
          {
            "content": "length The amount of data to write, in bytes\n",
            "line": 175,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 176,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source string from where the content will be copied\n",
            "line": 177,
            "tag": "param"
          },
          {
            "content": "`RefData` itself for convenience\n",
            "line": 178,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`RefData` itself for convenience\n",
            "line": 178
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      }
    ],
    "name": "RefData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "RefData\n",
        "line": 63,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "RefData"
  }
}