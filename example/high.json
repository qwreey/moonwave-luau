{
  ":ungrouped": {},
  "BoxData": {
    "client": false,
    "comments": "A user manageable heap memory.",
    "fields": [
      {
        "client": false,
        "comments": "The size of the box.",
        "ignore": false,
        "kind": "field",
        "line": 184,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 184,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 185,
            "tag": "tag"
          },
          {
            "line": 186,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 187,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "BoxData"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 178,
    "methods": [
      {
        "client": false,
        "comments": "Fill the box with zero.",
        "ignore": false,
        "kind": "method",
        "line": 194,
        "name": "zero",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 194,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 195,
            "tag": "tag"
          },
          {
            "content": "zero\n",
            "line": 196,
            "tag": "method"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 200,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 200
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of the box after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
        "ignore": false,
        "kind": "method",
        "line": 204,
        "name": "leak",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 212,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 204,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 205,
            "tag": "tag"
          },
          {
            "content": "leak\n",
            "line": 206,
            "tag": "method"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 212,
            "tag": "param"
          },
          {
            "content": "A reference of the box\n",
            "line": 213,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the box\n",
            "line": 213
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of the box.\n\nThe created reference keeps the box from being garbage collected until the reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 217,
        "name": "ref",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 225,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 217,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 218,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 219,
            "tag": "method"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 225,
            "tag": "param"
          },
          {
            "content": "A reference of the box\n",
            "line": 226,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the box\n",
            "line": 226
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy content from another data with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 230,
        "name": "copyFrom",
        "params": [
          {
            "description": "The source data\n",
            "line": 236,
            "name": "src"
          },
          {
            "description": "The amount of data to copy, in bytes\n",
            "line": 237,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 238,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 239,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 230,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 231,
            "tag": "tag"
          },
          {
            "content": "copyFrom\n",
            "line": 232,
            "tag": "method"
          },
          {
            "content": "src The source data\n",
            "line": 236,
            "tag": "param"
          },
          {
            "content": "length The amount of data to copy, in bytes\n",
            "line": 237,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 238,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 239,
            "tag": "param"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 240,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 240
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read string from data with specific length without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 250,
        "name": "readString",
        "params": [
          {
            "description": "The amount of data to read, in bytes\n",
            "line": 256,
            "name": "length"
          },
          {
            "description": "Offset to read string from\n",
            "line": 257,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 250,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 251,
            "tag": "tag"
          },
          {
            "content": "readString\n",
            "line": 252,
            "tag": "method"
          },
          {
            "content": "length The amount of data to read, in bytes\n",
            "line": 256,
            "tag": "param"
          },
          {
            "content": "offset Offset to read string from\n",
            "line": 257,
            "tag": "param"
          },
          {
            "content": "A string\n",
            "line": 258,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A string\n",
            "line": 258
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write string into data without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 262,
        "name": "writeString",
        "params": [
          {
            "description": "The source string\n",
            "line": 268,
            "name": "src"
          },
          {
            "description": "The amount of data to write, in bytes\n",
            "line": 269,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 270,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source string from where the content will be copied\n",
            "line": 271,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "BoxData\n",
            "line": 262,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 263,
            "tag": "tag"
          },
          {
            "content": "writeString\n",
            "line": 264,
            "tag": "method"
          },
          {
            "content": "src The source string\n",
            "line": 268,
            "tag": "param"
          },
          {
            "content": "length The amount of data to write, in bytes\n",
            "line": 269,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 270,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source string from where the content will be copied\n",
            "line": 271,
            "tag": "param"
          },
          {
            "content": "`BoxData` itself for convenience\n",
            "line": 272,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`BoxData` itself for convenience\n",
            "line": 272
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "BoxData",
        "yields": false
      }
    ],
    "name": "BoxData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "BoxData\n",
        "line": 178,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "BoxData"
  },
  "C": {
    "client": false,
    "comments": "Namespace for compile time sized c types.",
    "ignore": false,
    "kind": "class",
    "line": 47,
    "name": "C",
    "plugin": false,
    "private": false,
    "props": [
      {
        "client": false,
        "comments": "Compiler defined C `char` type.\n\nThe signedness may differ depending on the compiler and platform.\n\nYou can get signedness by `signedness` field.",
        "ignore": false,
        "kind": "prop",
        "line": 1026,
        "name": "char",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "char NumCType\n",
            "line": 1026,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1027,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned char` type.\n\nMostly equivalent to `u8`.",
        "ignore": false,
        "kind": "prop",
        "line": 1038,
        "name": "uchar",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "uchar NumCType\n",
            "line": 1038,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1039,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `signed char` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1048,
        "name": "schar",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "schar NumCType\n",
            "line": 1048,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1049,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `short` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1056,
        "name": "short",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "short NumCType\n",
            "line": 1056,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1057,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned short` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1064,
        "name": "ushort",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ushort NumCType\n",
            "line": 1064,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1065,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `int` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1072,
        "name": "int",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "int NumCType\n",
            "line": 1072,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1073,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned int` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1082,
        "name": "uint",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "uint NumCType\n",
            "line": 1082,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1083,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `long` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1092,
        "name": "long",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "long NumCType\n",
            "line": 1092,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1093,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned long` type.\n\nThe side may differ depending on the compiler and platform.",
        "ignore": false,
        "kind": "prop",
        "line": 1102,
        "name": "ulong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ulong NumCType\n",
            "line": 1102,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1103,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned longlong` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1112,
        "name": "longlong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "longlong NumCType\n",
            "line": 1112,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1113,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      },
      {
        "client": false,
        "comments": "Compiler defined C `unsigned longlong` type.",
        "ignore": false,
        "kind": "prop",
        "line": 1120,
        "name": "longlong",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "longlong NumCType\n",
            "line": 1120,
            "tag": "prop"
          },
          {
            "content": "C\n",
            "line": 1121,
            "tag": "within"
          }
        ],
        "readonly": false,
        "server": false,
        "type": "NumCType",
        "unreleased": false,
        "within": "C"
      }
    ],
    "raw_tags": [
      {
        "content": "C\n",
        "line": 47,
        "tag": "class"
      }
    ],
    "server": false,
    "unknowns": [
      {
        "comments": "Create a function signature type information.",
        "kind": "unknown",
        "line": 1167,
        "raw_tags": [
          {
            "content": "C\n",
            "line": 1167,
            "tag": "within"
          },
          {
            "content": "args An array of CTypes represents the arguments of the function\n",
            "line": 1171,
            "tag": "param"
          },
          {
            "content": "ret The return type of the function\n",
            "line": 1172,
            "tag": "param"
          },
          {
            "content": "A function signature type information\n",
            "line": 1173,
            "tag": "return"
          }
        ],
        "within": "C"
      },
      {
        "comments": "Create a struct type information.",
        "kind": "unknown",
        "line": 1180,
        "raw_tags": [
          {
            "content": "C\n",
            "line": 1180,
            "tag": "within"
          },
          {
            "content": "fields An array of CTypes represents the fields of the struct\n",
            "line": 1184,
            "tag": "param"
          },
          {
            "content": "A struct type information\n",
            "line": 1185,
            "tag": "return"
          }
        ],
        "within": "C"
      }
    ],
    "unreleased": false,
    "within": "C"
  },
  "CArrInfo": {
    "client": false,
    "comments": "A c sized array type information. It can be used for sturct field.\n\nFor function arguments, use CPtr instead.",
    "fields": [
      {
        "client": false,
        "comments": "The total size of the array in bytes.",
        "ignore": false,
        "kind": "field",
        "line": 580,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 580,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 581,
            "tag": "tag"
          },
          {
            "line": 582,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 583,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      },
      {
        "client": false,
        "comments": "The length of the array.",
        "ignore": false,
        "kind": "field",
        "line": 589,
        "name": "length",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 589,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 590,
            "tag": "tag"
          },
          {
            "line": 591,
            "tag": "readonly"
          },
          {
            "content": "length\n",
            "line": 592,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      },
      {
        "client": false,
        "comments": "The inner element type of the array.",
        "ignore": false,
        "kind": "field",
        "line": 598,
        "name": "inner",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 598,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 599,
            "tag": "tag"
          },
          {
            "line": 600,
            "tag": "readonly"
          },
          {
            "content": "inner\n",
            "line": 601,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CArrInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 572,
    "methods": [
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 609,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 609,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 610,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 611,
            "tag": "method"
          },
          {
            "content": "A pointer subtype\n",
            "line": 615,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 615
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial values.",
        "ignore": false,
        "kind": "method",
        "line": 621,
        "name": "box",
        "params": [
          {
            "description": "The array of field values\n",
            "line": 627,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 621,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 622,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 623,
            "tag": "method"
          },
          {
            "content": "table The array of field values\n",
            "line": 627,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 628,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 628
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua table from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 632,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 638,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 639,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 632,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 633,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 634,
            "tag": "method"
          },
          {
            "content": "target Target to read data from\n",
            "line": 638,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 639,
            "tag": "param"
          },
          {
            "content": "A table\n",
            "line": 640,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A table\n",
            "line": 640
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua table into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 644,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 650,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 651,
            "name": "table"
          },
          {
            "description": "Offset to write data into\n",
            "line": 652,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 644,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 645,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 646,
            "tag": "method"
          },
          {
            "content": "target Target to write data into\n",
            "line": 650,
            "tag": "param"
          },
          {
            "content": "table Lua data to write\n",
            "line": 651,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 652,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 661,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 667,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 668,
            "name": "src"
          },
          {
            "description": "The offset in the dst where the content will be pasted\n",
            "line": 669,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 670,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 661,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 662,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 663,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 667,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 668,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the dst where the content will be pasted\n",
            "line": 669,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 670,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the byte offset of the field.",
        "ignore": false,
        "kind": "method",
        "line": 682,
        "name": "offset",
        "params": [
          {
            "description": "The element index\n",
            "line": 688,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CArrInfo\n",
            "line": 682,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 683,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 684,
            "tag": "method"
          },
          {
            "content": "index The element index\n",
            "line": 688,
            "tag": "param"
          },
          {
            "content": "The byte offset\n",
            "line": 689,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The byte offset\n",
            "line": 689
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CArrInfo",
        "yields": false
      }
    ],
    "name": "CArrInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CArrInfo\n",
        "line": 572,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CArrInfo"
  },
  "CFnInfo": {
    "client": false,
    "comments": "A C function pointer type information, with function signature.\n\nFor struct field, array element, or function arguments, use `void:ptr()` instead.",
    "fields": [
      {
        "client": false,
        "comments": "The size of a function pointer.\n\nEquivalent to `ffi.c.usize.size`.",
        "ignore": false,
        "kind": "field",
        "line": 703,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 703,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 704,
            "tag": "tag"
          },
          {
            "line": 705,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 706,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CFnInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 695,
    "methods": [
      {
        "client": false,
        "comments": "Create a callable from reference.",
        "ignore": false,
        "kind": "method",
        "line": 716,
        "name": "callable",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 716,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 717,
            "tag": "tag"
          },
          {
            "content": "callable\n",
            "line": 718,
            "tag": "method"
          },
          {
            "content": "A callable\n",
            "line": 722,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A callable\n",
            "line": 722
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CFnInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a closure from lua function.\n\nTo return some data, lua function should write value into ret reference.",
        "ignore": false,
        "kind": "method",
        "line": 726,
        "name": "closure",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CFnInfo\n",
            "line": 726,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 727,
            "tag": "tag"
          },
          {
            "content": "closure\n",
            "line": 728,
            "tag": "method"
          },
          {
            "content": "A closure\n",
            "line": 734,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A closure\n",
            "line": 734
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CFnInfo",
        "yields": false
      }
    ],
    "name": "CFnInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CFnInfo\n",
        "line": 695,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CFnInfo"
  },
  "CPtrInfo": {
    "fields": [
      {
        "client": false,
        "comments": "The size of a pointer. should be the same for all pointers.\n\nEquivalent to `ffi.c.usize.size`.",
        "ignore": false,
        "kind": "field",
        "line": 482,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 482,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 483,
            "tag": "tag"
          },
          {
            "line": 484,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 485,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo"
      },
      {
        "client": false,
        "comments": "The inner type of the pointer.",
        "ignore": false,
        "kind": "field",
        "line": 493,
        "name": "inner",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 493,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 494,
            "tag": "tag"
          },
          {
            "line": 495,
            "tag": "readonly"
          },
          {
            "content": "inner\n",
            "line": 496,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo"
      }
    ],
    "methods": [
      {
        "client": false,
        "comments": "Create an array subtype with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 505,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 511,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 505,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 506,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 507,
            "tag": "method"
          },
          {
            "content": "length The length of the array\n",
            "line": 511,
            "tag": "param"
          },
          {
            "content": "An array subtype\n",
            "line": 512,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "An array subtype\n",
            "line": 512
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 517,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 517,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 518,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 519,
            "tag": "method"
          },
          {
            "content": "A pointer subtype\n",
            "line": 523,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 523
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read address from data, then return RefData.\n\nUseful when reading pointer fields of structures.\n\nIf the `ref` argument is given, rather than create new RefData, update it.",
        "ignore": false,
        "kind": "method",
        "line": 529,
        "name": "readRef",
        "params": [
          {
            "description": "Target data to read address from\n",
            "line": 539,
            "name": "target"
          },
          {
            "description": "Offset to read address from\n",
            "line": 540,
            "name": "offset"
          },
          {
            "description": "RefData to update\n",
            "line": 541,
            "name": "ref"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 529,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 530,
            "tag": "tag"
          },
          {
            "content": "readRef\n",
            "line": 531,
            "tag": "method"
          },
          {
            "content": "target Target data to read address from\n",
            "line": 539,
            "tag": "param"
          },
          {
            "content": "offset Offset to read address from\n",
            "line": 540,
            "tag": "param"
          },
          {
            "content": "ref RefData to update\n",
            "line": 541,
            "tag": "param"
          },
          {
            "content": "A lua value\n",
            "line": 542,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A lua value\n",
            "line": 542
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write address to data.\n\t\nUseful when writing pointer fields of structures.",
        "ignore": false,
        "kind": "method",
        "line": 551,
        "name": "writeRef",
        "params": [
          {
            "description": "Target data to write address into\n",
            "line": 559,
            "name": "target"
          },
          {
            "description": "Memory address to write\n",
            "line": 560,
            "name": "ref"
          },
          {
            "description": "Offset to write address into\n",
            "line": 561,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CPtrInfo\n",
            "line": 551,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 552,
            "tag": "tag"
          },
          {
            "content": "writeRef\n",
            "line": 553,
            "tag": "method"
          },
          {
            "content": "target Target data to write address into\n",
            "line": 559,
            "tag": "param"
          },
          {
            "content": "ref Memory address to write\n",
            "line": 560,
            "tag": "param"
          },
          {
            "content": "offset Offset to write address into\n",
            "line": 561,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CPtrInfo",
        "yields": false
      }
    ]
  },
  "CStructInfo": {
    "client": false,
    "comments": "A c struct type information.",
    "fields": [
      {
        "client": false,
        "comments": "The size of a struct, including padding.",
        "ignore": false,
        "kind": "field",
        "line": 746,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CStructInfo\n",
            "line": 746,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 747,
            "tag": "tag"
          },
          {
            "line": 748,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 749,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CStructInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 740,
    "name": "CStructInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CStructInfo\n",
        "line": 740,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CStructInfo"
  },
  "CSturctInfo": {
    "methods": [
      {
        "client": false,
        "comments": "Create a struct array type.",
        "ignore": false,
        "kind": "method",
        "line": 757,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 763,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 757,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 758,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 759,
            "tag": "method"
          },
          {
            "content": "length The length of the array\n",
            "line": 763,
            "tag": "param"
          },
          {
            "content": "A struct array type\n",
            "line": 764,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A struct array type\n",
            "line": 764
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a struct pointer type.",
        "ignore": false,
        "kind": "method",
        "line": 768,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 768,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 769,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 770,
            "tag": "method"
          },
          {
            "content": "A struct pointer type\n",
            "line": 774,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A struct pointer type\n",
            "line": 774
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial value.",
        "ignore": false,
        "kind": "method",
        "line": 780,
        "name": "box",
        "params": [
          {
            "description": "The array of field values\n",
            "line": 786,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 780,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 781,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 782,
            "tag": "method"
          },
          {
            "content": "table The array of field values\n",
            "line": 786,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 787,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 787
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua table from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 791,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 797,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 798,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 791,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 792,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 793,
            "tag": "method"
          },
          {
            "content": "target Target to read data from\n",
            "line": 797,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 798,
            "tag": "param"
          },
          {
            "content": "A table\n",
            "line": 799,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A table\n",
            "line": 799
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua table into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 803,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 809,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 810,
            "name": "table"
          },
          {
            "description": "Offset to write data into\n",
            "line": 811,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 803,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 804,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 805,
            "tag": "method"
          },
          {
            "content": "target Target to write data into\n",
            "line": 809,
            "tag": "param"
          },
          {
            "content": "table Lua data to write\n",
            "line": 810,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 811,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 820,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 826,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 827,
            "name": "src"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 828,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 829,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 820,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 821,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 822,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 826,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 827,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 828,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 829,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the field offset.",
        "ignore": false,
        "kind": "method",
        "line": 841,
        "name": "offset",
        "params": [
          {
            "description": "The field index\n",
            "line": 847,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 841,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 842,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 843,
            "tag": "method"
          },
          {
            "content": "index The field index\n",
            "line": 847,
            "tag": "param"
          },
          {
            "content": "The byte offset\n",
            "line": 848,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The byte offset\n",
            "line": 848
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Get the field type.",
        "ignore": false,
        "kind": "method",
        "line": 852,
        "name": "field",
        "params": [
          {
            "description": "The field index\n",
            "line": 858,
            "name": "index"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CSturctInfo\n",
            "line": 852,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 853,
            "tag": "tag"
          },
          {
            "content": "field\n",
            "line": 854,
            "tag": "method"
          },
          {
            "content": "index The field index\n",
            "line": 858,
            "tag": "param"
          },
          {
            "content": "The field type\n",
            "line": 859,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "The field type\n",
            "line": 859
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CSturctInfo",
        "yields": false
      }
    ]
  },
  "CTypeInfo": {
    "fields": [
      {
        "client": false,
        "comments": "The size of the type in bytes.",
        "ignore": false,
        "kind": "field",
        "line": 344,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 344,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 345,
            "tag": "tag"
          },
          {
            "line": 346,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 347,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo"
      },
      {
        "client": false,
        "comments": "The signedness of the type.",
        "ignore": false,
        "kind": "field",
        "line": 353,
        "name": "signedness",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 353,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 354,
            "tag": "tag"
          },
          {
            "line": 355,
            "tag": "readonly"
          },
          {
            "content": "signedness\n",
            "line": 356,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo"
      }
    ],
    "methods": [
      {
        "client": false,
        "comments": "Create a pointer subtype.",
        "ignore": false,
        "kind": "method",
        "line": 364,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 364,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 365,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 366,
            "tag": "method"
          },
          {
            "content": "A pointer subtype\n",
            "line": 370,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A pointer subtype\n",
            "line": 370
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create an array subtype with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 374,
        "name": "arr",
        "params": [
          {
            "description": "The length of the array\n",
            "line": 380,
            "name": "length"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 374,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 375,
            "tag": "tag"
          },
          {
            "content": "arr\n",
            "line": 376,
            "tag": "method"
          },
          {
            "content": "length The length of the array\n",
            "line": 380,
            "tag": "param"
          },
          {
            "content": "An array subtype\n",
            "line": 381,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "An array subtype\n",
            "line": 381
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a box with initial values.",
        "ignore": false,
        "kind": "method",
        "line": 387,
        "name": "box",
        "params": [
          {
            "description": "The array of element values\n",
            "line": 393,
            "name": "table"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 387,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 388,
            "tag": "tag"
          },
          {
            "content": "box\n",
            "line": 389,
            "tag": "method"
          },
          {
            "content": "table The array of element values\n",
            "line": 393,
            "tag": "param"
          },
          {
            "content": "A box\n",
            "line": 394,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A box\n",
            "line": 394
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read a lua value from reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 398,
        "name": "readData",
        "params": [
          {
            "description": "Target to read data from\n",
            "line": 404,
            "name": "target"
          },
          {
            "description": "Offset to read data from\n",
            "line": 405,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 398,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 399,
            "tag": "tag"
          },
          {
            "content": "readData\n",
            "line": 400,
            "tag": "method"
          },
          {
            "content": "target Target to read data from\n",
            "line": 404,
            "tag": "param"
          },
          {
            "content": "offset Offset to read data from\n",
            "line": 405,
            "tag": "param"
          },
          {
            "content": "A lua value\n",
            "line": 406,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A lua value\n",
            "line": 406
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write a lua value into reference or box.",
        "ignore": false,
        "kind": "method",
        "line": 410,
        "name": "writeData",
        "params": [
          {
            "description": "Target to write data into\n",
            "line": 416,
            "name": "target"
          },
          {
            "description": "Lua data to write\n",
            "line": 417,
            "name": "value"
          },
          {
            "description": "Offset to write data into\n",
            "line": 418,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 410,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 411,
            "tag": "tag"
          },
          {
            "content": "writeData\n",
            "line": 412,
            "tag": "method"
          },
          {
            "content": "target Target to write data into\n",
            "line": 416,
            "tag": "param"
          },
          {
            "content": "value Lua data to write\n",
            "line": 417,
            "tag": "param"
          },
          {
            "content": "offset Offset to write data into\n",
            "line": 418,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy values from the source and paste them into the target.",
        "ignore": false,
        "kind": "method",
        "line": 422,
        "name": "copyData",
        "params": [
          {
            "description": "Where the content will be pasted\n",
            "line": 428,
            "name": "dst"
          },
          {
            "description": "The source data\n",
            "line": 429,
            "name": "src"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 430,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 431,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 422,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 423,
            "tag": "tag"
          },
          {
            "content": "copyData\n",
            "line": 424,
            "tag": "method"
          },
          {
            "content": "dst Where the content will be pasted\n",
            "line": 428,
            "tag": "param"
          },
          {
            "content": "src The source data\n",
            "line": 429,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 430,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 431,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Stringify data. Useful when output numbers, which Luau can't handle.",
        "ignore": false,
        "kind": "method",
        "line": 441,
        "name": "stringifyData",
        "params": [
          {
            "description": "The target data\n",
            "line": 447,
            "name": "target"
          },
          {
            "description": "Offset to stringify data from\n",
            "line": 448,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 441,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 442,
            "tag": "tag"
          },
          {
            "content": "stringifyData\n",
            "line": 443,
            "tag": "method"
          },
          {
            "content": "target The target data\n",
            "line": 447,
            "tag": "param"
          },
          {
            "content": "offset Offset to stringify data from\n",
            "line": 448,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      },
      {
        "client": false,
        "comments": "Casting data to different type.\n\nMay result in loss of precision.",
        "ignore": false,
        "kind": "method",
        "line": 455,
        "name": "cast",
        "params": [
          {
            "description": "The target type to convert to\n",
            "line": 463,
            "name": "intoType"
          },
          {
            "description": "Source data to be converted\n",
            "line": 464,
            "name": "fromData"
          },
          {
            "description": "Target to write converted data into\n",
            "line": 465,
            "name": "intoData"
          },
          {
            "description": "The offset in the source data\n",
            "line": 466,
            "name": "fromOffset"
          },
          {
            "description": "The offset in the destination\n",
            "line": 467,
            "name": "intoOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CTypeInfo\n",
            "line": 455,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 456,
            "tag": "tag"
          },
          {
            "content": "cast\n",
            "line": 457,
            "tag": "method"
          },
          {
            "content": "intoType The target type to convert to\n",
            "line": 463,
            "tag": "param"
          },
          {
            "content": "fromData Source data to be converted\n",
            "line": 464,
            "tag": "param"
          },
          {
            "content": "intoData Target to write converted data into\n",
            "line": 465,
            "tag": "param"
          },
          {
            "content": "fromOffset The offset in the source data\n",
            "line": 466,
            "tag": "param"
          },
          {
            "content": "intoOffset The offset in the destination\n",
            "line": 467,
            "tag": "param"
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CTypeInfo",
        "yields": false
      }
    ]
  },
  "CTypes": {
    "client": false,
    "comments": "All possible C types.",
    "ignore": false,
    "kind": "class",
    "line": 1130,
    "name": "CTypes",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CTypes\n",
        "line": 1130,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CTypes"
  },
  "CVoidInfo": {
    "client": false,
    "comments": "A type that represents c void. can only be used for the function return type.",
    "fields": [
      {
        "client": false,
        "comments": "The size of the void type. It is always 0.",
        "ignore": false,
        "kind": "field",
        "line": 871,
        "name": "size",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CVoidInfo\n",
            "line": 871,
            "tag": "within"
          },
          {
            "content": "Field\n",
            "line": 872,
            "tag": "tag"
          },
          {
            "line": 873,
            "tag": "readonly"
          },
          {
            "content": "size\n",
            "line": 874,
            "tag": "field"
          }
        ],
        "readonly": true,
        "server": false,
        "tags": [
          "Field\n"
        ],
        "unreleased": false,
        "within": "CVoidInfo"
      }
    ],
    "ignore": false,
    "kind": "class",
    "line": 865,
    "methods": [
      {
        "client": false,
        "comments": "Create a generic pointer type.",
        "ignore": false,
        "kind": "method",
        "line": 882,
        "name": "ptr",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "CVoidInfo\n",
            "line": 882,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 883,
            "tag": "tag"
          },
          {
            "content": "ptr\n",
            "line": 884,
            "tag": "method"
          },
          {
            "content": "Generic pointer type, equivalent to `*void` in C.\n",
            "line": 888,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "Generic pointer type, equivalent to `*void` in C.\n",
            "line": 888
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "CVoidInfo",
        "yields": false
      }
    ],
    "name": "CVoidInfo",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CVoidInfo\n",
        "line": 865,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CVoidInfo"
  },
  "CallableData": {
    "client": false,
    "comments": "A callable external function.\n\nTo call external function, provide memory for save the return value and references for the arguments.\n\nIf return type is `void`, pass `nil`.",
    "ignore": false,
    "kind": "class",
    "line": 303,
    "name": "CallableData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "CallableData\n",
        "line": 303,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "CallableData"
  },
  "ClosureData": {
    "client": false,
    "comments": "A reference that holds lua function.",
    "ignore": false,
    "kind": "class",
    "line": 320,
    "methods": [
      {
        "client": false,
        "comments": "Create a reference of the closure. usually can be used for passing function pointer as argument.\n\nThe created reference keeps the closure from being garbage collected until the reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 326,
        "name": "ref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "ClosureData\n",
            "line": 326,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 327,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 328,
            "tag": "method"
          },
          {
            "content": "A reference of the closure\n",
            "line": 334,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of the closure\n",
            "line": 334
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "ClosureData",
        "yields": false
      }
    ],
    "name": "ClosureData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "ClosureData\n",
        "line": 320,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "ClosureData"
  },
  "FFI": {
    "client": false,
    "comments": "> Note: **This library is technical preview**, not completed yet. Behaviors can be changed in future.\n\nBuilt-in library for foreign function interface.\n\n### Example usage\nlib.c:\n```c```\nint add(int a, int b) {```\n\treturn a + b;```\n}```\n\ninit.luau:\n```lua```\nlocal ffi = require(\"@lune/ffi\")```\n\n-- Create function signature```\nlocal addSignature = ffi.c.fn({ ffi.c.int, ffi.c.int }, ffi.c.int)```\n\n-- Load library```\nlocal lib = ffi.open(\"./lib.so\")```\n\n-- Get symbol from library```\nlocal addSymbol = lib:find(\"add\")```\n\n-- Create CallableData```\nlocal add = addSignature:callable(addSymbol)```\n\n-- Create result box and arguments```\nlocal result = ffi.box(ffi.c.int.size)```\nlocal a = ffi.c.int:box(1)```\nlocal b = ffi.c.int:box(2)```\n\n-- Call external function```\nadd(result, a:ref(), b:ref())```\n\n-- Get number from result```\nprint(ffi.c.int:readData(result))```",
    "ignore": false,
    "kind": "class",
    "line": 2,
    "name": "FFI",
    "plugin": false,
    "private": false,
    "props": [
      {
        "client": false,
        "comments": "A 8-bit sized unsigned integer, Equivalent to `uint8_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 897,
        "name": "u8",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u8 NumCType\n",
            "line": 897,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 898,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 899,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 16-bit sized unsigned integer, Equivalent to `uint16_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 906,
        "name": "u16",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u16 NumCType\n",
            "line": 906,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 907,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 908,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 32-bit sized unsigned integer, Equivalent to `uint32_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 915,
        "name": "u32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u32 NumCType\n",
            "line": 915,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 916,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 917,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 64-bit sized unsigned integer, Equivalent to `uint64_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 924,
        "name": "u64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u64 NumCType\n",
            "line": 924,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 925,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 926,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 128-bit sized unsigned integer, Equivalent to `uint128_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 933,
        "name": "u128",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "u128 NumCType\n",
            "line": 933,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 934,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 935,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 8-bit sized signed integer, Equivalent to `int8_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 942,
        "name": "i8",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i8 NumCType\n",
            "line": 942,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 943,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 944,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 16-bit sized signed integer, Equivalent to `int16_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 951,
        "name": "i16",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i16 NumCType\n",
            "line": 951,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 952,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 953,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 32-bit sized signed integer, Equivalent to `int32_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 960,
        "name": "i32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i32 NumCType\n",
            "line": 960,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 961,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 962,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 64-bit sized signed integer, Equivalent to `int64_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 969,
        "name": "i64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i64 NumCType\n",
            "line": 969,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 970,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 971,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A 128-bit sized signed integer, Equivalent to `int128_t` in `stdint`.",
        "ignore": false,
        "kind": "prop",
        "line": 978,
        "name": "i128",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "i128 NumCType\n",
            "line": 978,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 979,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 980,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A single-precision 32-bit sized floating-point, Almost always equivalent to `float` in C.",
        "ignore": false,
        "kind": "prop",
        "line": 987,
        "name": "f32",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "f32 NumCType\n",
            "line": 987,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 988,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 989,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A double-precision 64-bit sized floating-point, Almost always equivalent to `double` in C.",
        "ignore": false,
        "kind": "prop",
        "line": 996,
        "name": "f64",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "f64 NumCType\n",
            "line": 996,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 997,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 998,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A machine specific pointer sized unsigned integer.",
        "ignore": false,
        "kind": "prop",
        "line": 1005,
        "name": "usize",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "usize NumCType\n",
            "line": 1005,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1006,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 1007,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      },
      {
        "client": false,
        "comments": "A machine specific pointer sized signed integer.",
        "ignore": false,
        "kind": "prop",
        "line": 1014,
        "name": "isize",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "isize NumCType\n",
            "line": 1014,
            "tag": "prop"
          },
          {
            "content": "FFI\n",
            "line": 1015,
            "tag": "within"
          },
          {
            "content": "NumCType\n",
            "line": 1016,
            "tag": "tag"
          }
        ],
        "readonly": false,
        "server": false,
        "tags": [
          "NumCType\n"
        ],
        "type": "NumCType",
        "unreleased": false,
        "within": "FFI"
      }
    ],
    "raw_tags": [
      {
        "line": 2,
        "tag": "unreleased"
      },
      {
        "content": "FFI\n",
        "line": 3,
        "tag": "class"
      }
    ],
    "server": false,
    "unknowns": [
      {
        "comments": "Create a `Ref` with address 0.\n\nCan be used for receive a pointer from external function or pass it as an argument.",
        "kind": "unknown",
        "line": 1192,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1192,
            "tag": "within"
          },
          {
            "content": "A zero initialized Ref\n",
            "line": 1198,
            "tag": "return"
          }
        ],
        "within": "FFI"
      },
      {
        "comments": "Create a `Box` with specific size.\nThe created box is not filed with zero.",
        "kind": "unknown",
        "line": 1205,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1205,
            "tag": "within"
          },
          {
            "content": "size The size of the new box\n",
            "line": 1210,
            "tag": "param"
          },
          {
            "content": "A allocated box\n",
            "line": 1211,
            "tag": "return"
          }
        ],
        "within": "FFI"
      },
      {
        "comments": "Open a dynamic library.",
        "kind": "unknown",
        "line": 1218,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1218,
            "tag": "within"
          },
          {
            "content": "name The name of the target library\n",
            "line": 1222,
            "tag": "param"
          },
          {
            "content": "A dynamic library handle\n",
            "line": 1223,
            "tag": "return"
          }
        ],
        "within": "FFI"
      },
      {
        "comments": "Return `true` if the second argument is an integer (i32).",
        "kind": "unknown",
        "line": 1230,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1230,
            "tag": "within"
          },
          {
            "content": "val A lua value to check\n",
            "line": 1234,
            "tag": "param"
          },
          {
            "content": "Whether val is an integer or not\n",
            "line": 1235,
            "tag": "return"
          }
        ],
        "within": "FFI"
      },
      {
        "comments": "Free referenced memory.",
        "kind": "unknown",
        "line": 1242,
        "raw_tags": [
          {
            "content": "FFI\n",
            "line": 1242,
            "tag": "within"
          },
          {
            "content": "data Target memory to free\n",
            "line": 1246,
            "tag": "param"
          }
        ],
        "within": "FFI"
      }
    ],
    "unreleased": true,
    "within": "FFI"
  },
  "LibData": {
    "client": false,
    "comments": "A dynamic opened library handle.",
    "ignore": false,
    "kind": "class",
    "line": 284,
    "methods": [
      {
        "client": false,
        "comments": "Find a symbol from the dynamic library.",
        "ignore": false,
        "kind": "method",
        "line": 290,
        "name": "find",
        "params": [
          {
            "description": "The name of the symbol\n",
            "line": 296,
            "name": "sym"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "LibData\n",
            "line": 290,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 291,
            "tag": "tag"
          },
          {
            "content": "find\n",
            "line": 292,
            "tag": "method"
          },
          {
            "content": "sym The name of the symbol\n",
            "line": 296,
            "tag": "param"
          },
          {
            "content": "A `Ref` of the found symbol\n",
            "line": 297,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A `Ref` of the found symbol\n",
            "line": 297
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "LibData",
        "yields": false
      }
    ],
    "name": "LibData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "LibData\n",
        "line": 284,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "LibData"
  },
  "RefData": {
    "client": false,
    "comments": "A user manageable memory reference.\n\nIt can be GCed, But it doesn't free the referenced memory.",
    "ignore": false,
    "kind": "class",
    "line": 56,
    "methods": [
      {
        "client": false,
        "comments": "Create a RefData by dereference this reference.\nThe created reference has no boundaries and has no restrictions.\n\nThis method is unsafe.",
        "ignore": false,
        "kind": "method",
        "line": 64,
        "name": "deref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 64,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 65,
            "tag": "tag"
          },
          {
            "content": "deref\n",
            "line": 66,
            "tag": "method"
          },
          {
            "content": "A dereferenced `RefData`\n",
            "line": 73,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A dereferenced `RefData`\n",
            "line": 73
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference with specific offset from this reference.\n\nThe created reference can be GCed and holds same data.",
        "ignore": false,
        "kind": "method",
        "line": 77,
        "name": "offset",
        "params": [
          {
            "description": "Create a reference at the given offset\n",
            "line": 85,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 77,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 78,
            "tag": "tag"
          },
          {
            "content": "offset\n",
            "line": 79,
            "tag": "method"
          },
          {
            "content": "offset Create a reference at the given offset\n",
            "line": 85,
            "tag": "param"
          },
          {
            "content": "A offseted reference\n",
            "line": 86,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A offseted reference\n",
            "line": 86
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of this reference.\n\nThe created reference keeps the target reference from being garbage collected until created reference itself is collected.",
        "ignore": false,
        "kind": "method",
        "line": 90,
        "name": "ref",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 90,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 91,
            "tag": "tag"
          },
          {
            "content": "ref\n",
            "line": 92,
            "tag": "method"
          },
          {
            "content": "A reference of this reference\n",
            "line": 98,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of this reference\n",
            "line": 98
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Create a reference of this reference after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
        "ignore": false,
        "kind": "method",
        "line": 102,
        "name": "leak",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 102,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 103,
            "tag": "tag"
          },
          {
            "content": "leak\n",
            "line": 104,
            "tag": "method"
          },
          {
            "content": "A reference of this reference\n",
            "line": 110,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A reference of this reference\n",
            "line": 110
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Check reference is null or not.",
        "ignore": false,
        "kind": "method",
        "line": 114,
        "name": "isNull",
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 114,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 115,
            "tag": "tag"
          },
          {
            "content": "isNull\n",
            "line": 116,
            "tag": "method"
          },
          {
            "content": "Whether reference is null or not\n",
            "line": 120,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "Whether reference is null or not\n",
            "line": 120
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Copy content from another data with specific length.",
        "ignore": false,
        "kind": "method",
        "line": 124,
        "name": "copyFrom",
        "params": [
          {
            "description": "The source data\n",
            "line": 130,
            "name": "src"
          },
          {
            "description": "The amount of data to copy, in bytes\n",
            "line": 131,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 132,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source data from where the content will be copied\n",
            "line": 133,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 124,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 125,
            "tag": "tag"
          },
          {
            "content": "copyFrom\n",
            "line": 126,
            "tag": "method"
          },
          {
            "content": "src The source data\n",
            "line": 130,
            "tag": "param"
          },
          {
            "content": "length The amount of data to copy, in bytes\n",
            "line": 131,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 132,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source data from where the content will be copied\n",
            "line": 133,
            "tag": "param"
          },
          {
            "content": "`RefData` itself for convenience\n",
            "line": 134,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`RefData` itself for convenience\n",
            "line": 134
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Read string from data with specific length without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 144,
        "name": "readString",
        "params": [
          {
            "description": "The amount of data to read, in bytes\n",
            "line": 150,
            "name": "length"
          },
          {
            "description": "Offset to read string from\n",
            "line": 151,
            "name": "offset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 144,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 145,
            "tag": "tag"
          },
          {
            "content": "readString\n",
            "line": 146,
            "tag": "method"
          },
          {
            "content": "length The amount of data to read, in bytes\n",
            "line": 150,
            "tag": "param"
          },
          {
            "content": "offset Offset to read string from\n",
            "line": 151,
            "tag": "param"
          },
          {
            "content": "A string\n",
            "line": 152,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "A string\n",
            "line": 152
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      },
      {
        "client": false,
        "comments": "Write string into data without null termination.",
        "ignore": false,
        "kind": "method",
        "line": 156,
        "name": "writeString",
        "params": [
          {
            "description": "The source string\n",
            "line": 162,
            "name": "src"
          },
          {
            "description": "The amount of data to write, in bytes\n",
            "line": 163,
            "name": "length"
          },
          {
            "description": "The offset in the destination where the content will be pasted\n",
            "line": 164,
            "name": "dstOffset"
          },
          {
            "description": "The offset in the source string from where the content will be copied\n",
            "line": 165,
            "name": "srcOffset"
          }
        ],
        "plugin": false,
        "private": false,
        "raw_tags": [
          {
            "content": "RefData\n",
            "line": 156,
            "tag": "within"
          },
          {
            "content": "Method\n",
            "line": 157,
            "tag": "tag"
          },
          {
            "content": "writeString\n",
            "line": 158,
            "tag": "method"
          },
          {
            "content": "src The source string\n",
            "line": 162,
            "tag": "param"
          },
          {
            "content": "length The amount of data to write, in bytes\n",
            "line": 163,
            "tag": "param"
          },
          {
            "content": "dstOffset The offset in the destination where the content will be pasted\n",
            "line": 164,
            "tag": "param"
          },
          {
            "content": "srcOffset The offset in the source string from where the content will be copied\n",
            "line": 165,
            "tag": "param"
          },
          {
            "content": "`RefData` itself for convenience\n",
            "line": 166,
            "tag": "return"
          }
        ],
        "returns": [
          {
            "description": "`RefData` itself for convenience\n",
            "line": 166
          }
        ],
        "server": false,
        "tags": [
          "Method\n"
        ],
        "unreleased": false,
        "within": "RefData",
        "yields": false
      }
    ],
    "name": "RefData",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "RefData\n",
        "line": 56,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "RefData"
  },
  "TEST": {
    "client": false,
    "comments": "COMMENT\nCOMMENT\nCOMMENT",
    "ignore": false,
    "kind": "class",
    "line": 1252,
    "name": "TEST",
    "plugin": false,
    "private": false,
    "raw_tags": [
      {
        "content": "TEST\n",
        "line": 1252,
        "tag": "class"
      }
    ],
    "server": false,
    "unreleased": false,
    "within": "TEST"
  }
}