[
  {
    "comments": "@unreleased\n@class FFI\n\n> Note: **This library is technical preview**, not completed yet. Behaviors can be changed in future.\n\nBuilt-in library for foreign function interface.\n\n### Example usage\nlib.c:\n```c\nint add(int a, int b) {\n\treturn a + b;\n}\n```\ninit.luau:\n```lua\nlocal ffi = require(\"@lune/ffi\")\n\n-- Create function signature\nlocal addSignature = ffi.c.fn({ ffi.c.int, ffi.c.int }, ffi.c.int)\n\n-- Load library\nlocal lib = ffi.open(\"./lib.so\")\n\n-- Get symbol from library\nlocal addSymbol = lib:find(\"add\")\n\n-- Create CallableData\nlocal add = addSignature:callable(addSymbol)\n\n-- Create result box and arguments\nlocal result = ffi.box(ffi.c.int.size)\nlocal a = ffi.c.int:box(1)\nlocal b = ffi.c.int:box(2)\n\n-- Call external function\nadd(result, a:ref(), b:ref())\n\n-- Get number from result\nprint(ffi.c.int:readData(result))\n```\n",
    "linenums": [
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42
    ]
  },
  {
    "comments": "@class C\n\nNamespace for compile time sized c types.\n",
    "linenums": [
      47,
      48,
      49
    ]
  },
  {
    "comments": "@class RefData\n\nA user manageable memory reference.\n\nIt can be GCed, But it doesn't free the referenced memory.\n",
    "linenums": [
      56,
      57,
      58,
      59,
      60
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method deref\n\nCreate a RefData by dereference this reference.\nThe created reference has no boundaries and has no restrictions.\n\nThis method is unsafe.\n\n@return A dereferenced `RefData`\n\t",
    "linenums": [
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method offset\n\nCreate a reference with specific offset from this reference.\n\nThe created reference can be GCed and holds same data.\n\n@param offset Create a reference at the given offset\n@return A offseted reference\n\t",
    "linenums": [
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method ref\n\nCreate a reference of this reference.\n\nThe created reference keeps the target reference from being garbage collected until created reference itself is collected.\n\n@return A reference of this reference\n\t",
    "linenums": [
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method leak\n\nCreate a reference of this reference after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.\n\n@return A reference of this reference\n\t",
    "linenums": [
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method isNull\n\nCheck reference is null or not.\n\n@return Whether reference is null or not\n\t",
    "linenums": [
      114,
      115,
      116,
      117,
      118,
      119,
      120
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method copyFrom\n\nCopy content from another data with specific length.\n\n@param src The source data\n@param length The amount of data to copy, in bytes\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source data from where the content will be copied\n@return `RefData` itself for convenience\n\t",
    "linenums": [
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method readString\n\nRead string from data with specific length without null termination.\n\n@param length The amount of data to read, in bytes\n@param offset Offset to read string from\n@return A string\n\t",
    "linenums": [
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152
    ]
  },
  {
    "comments": "@within RefData\n@tag Method\n@method writeString\n\nWrite string into data without null termination.\n\n@param src The source string\n@param length The amount of data to write, in bytes\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source string from where the content will be copied\n@return `RefData` itself for convenience\n\t",
    "linenums": [
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166
    ]
  },
  {
    "comments": "@class BoxData\n\nA user manageable heap memory.\n",
    "linenums": [
      178,
      179,
      180
    ]
  },
  {
    "comments": "@within BoxData\n@tag Field\n@readonly\n@field size\n\nThe size of the box.\n\t",
    "linenums": [
      184,
      185,
      186,
      187,
      188,
      189
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method zero\n\nFill the box with zero.\n\n@return `BoxData` itself for convenience\n\t",
    "linenums": [
      194,
      195,
      196,
      197,
      198,
      199,
      200
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method leak\n\nCreate a reference of the box after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.\n\n@param offset Create a reference at the given offset\n@return A reference of the box\n\t",
    "linenums": [
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method ref\n\nCreate a reference of the box.\n\nThe created reference keeps the box from being garbage collected until the reference itself is collected.\n\n@param offset Create a reference at the given offset\n@return A reference of the box\n\t",
    "linenums": [
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method copyFrom\n\nCopy content from another data with specific length.\n\n@param src The source data\n@param length The amount of data to copy, in bytes\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source data from where the content will be copied\n@return `BoxData` itself for convenience\n\t",
    "linenums": [
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method readString\n\nRead string from data with specific length without null termination.\n\n@param length The amount of data to read, in bytes\n@param offset Offset to read string from\n@return A string\n\t",
    "linenums": [
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258
    ]
  },
  {
    "comments": "@within BoxData\n@tag Method\n@method writeString\n\nWrite string into data without null termination.\n\n@param src The source string\n@param length The amount of data to write, in bytes\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source string from where the content will be copied\n@return `BoxData` itself for convenience\n\t",
    "linenums": [
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272
    ]
  },
  {
    "comments": "@class LibData\n\nA dynamic opened library handle.\n",
    "linenums": [
      284,
      285,
      286
    ]
  },
  {
    "comments": "@within LibData\n@tag Method\n@method find\n\nFind a symbol from the dynamic library.\n\n@param sym The name of the symbol\n@return A `Ref` of the found symbol\n\t",
    "linenums": [
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297
    ]
  },
  {
    "comments": "@class CallableData\n\nA callable external function.\n\nTo call external function, provide memory for save the return value and references for the arguments.\n\nIf return type is `void`, pass `nil`.\n",
    "linenums": [
      303,
      304,
      305,
      306,
      307,
      308,
      309
    ]
  },
  {
    "comments": "@class ClosureData\n\nA reference that holds lua function.\n",
    "linenums": [
      320,
      321,
      322
    ]
  },
  {
    "comments": "@within ClosureData\n@tag Method\n@method ref\n\nCreate a reference of the closure. usually can be used for passing function pointer as argument.\n\nThe created reference keeps the closure from being garbage collected until the reference itself is collected.\n\n@return A reference of the closure\n\t",
    "linenums": [
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Field\n@readonly\n@field size\n\nThe size of the type in bytes.\n\t",
    "linenums": [
      344,
      345,
      346,
      347,
      348,
      349
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Field\n@readonly\n@field signedness\n\nThe signedness of the type.\n\t",
    "linenums": [
      353,
      354,
      355,
      356,
      357,
      358
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method ptr\n\nCreate a pointer subtype.\n\n@return A pointer subtype\n\t",
    "linenums": [
      364,
      365,
      366,
      367,
      368,
      369,
      370
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method arr\n\nCreate an array subtype with specific length.\n\n@param length The length of the array\n@return An array subtype\n\t",
    "linenums": [
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method box\n\nCreate a box with initial values.\n\n@param table The array of element values\n@return A box\n\t",
    "linenums": [
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method readData\n\nRead a lua value from reference or box.\n\n@param target Target to read data from\n@param offset Offset to read data from\n@return A lua value\n\t",
    "linenums": [
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method writeData\n\nWrite a lua value into reference or box.\n\n@param target Target to write data into\n@param value Lua data to write\n@param offset Offset to write data into\n\t",
    "linenums": [
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method copyData\n\t\nCopy values from the source and paste them into the target.\n\n@param dst Where the content will be pasted\n@param src The source data\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source data from where the content will be copied\n\t",
    "linenums": [
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method stringifyData\n\nStringify data. Useful when output numbers, which Luau can't handle.\n\t\n@param target The target data\n@param offset Offset to stringify data from\n\t",
    "linenums": [
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448
    ]
  },
  {
    "comments": "@within CTypeInfo\n@tag Method\n@method cast\n\t\nCasting data to different type.\n\nMay result in loss of precision.\n\n@param intoType The target type to convert to\n@param fromData Source data to be converted\n@param intoData Target to write converted data into\n@param fromOffset The offset in the source data\n@param intoOffset The offset in the destination\n\t",
    "linenums": [
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Field\n@readonly\n@field size\n\nThe size of a pointer. should be the same for all pointers.\n\nEquivalent to `ffi.c.usize.size`.\n\t",
    "linenums": [
      482,
      483,
      484,
      485,
      486,
      487,
      488,
      489
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Field\n@readonly\n@field inner\n\nThe inner type of the pointer.\n\t",
    "linenums": [
      493,
      494,
      495,
      496,
      497,
      498
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Method\n@method arr\n\nCreate an array subtype with specific length.\n\n@param length The length of the array\n@return An array subtype\n\t",
    "linenums": [
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Method\n@method ptr\n\nCreate a pointer subtype.\n\n@return A pointer subtype\n\t",
    "linenums": [
      517,
      518,
      519,
      520,
      521,
      522,
      523
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Method\n@method readRef\n\nRead address from data, then return RefData.\n\nUseful when reading pointer fields of structures.\n\nIf the `ref` argument is given, rather than create new RefData, update it.\n\n@param target Target data to read address from\n@param offset Offset to read address from\n@param ref RefData to update\n@return A lua value\n\t",
    "linenums": [
      529,
      530,
      531,
      532,
      533,
      534,
      535,
      536,
      537,
      538,
      539,
      540,
      541,
      542
    ]
  },
  {
    "comments": "@within CPtrInfo\n@tag Method\n@method writeRef\n\nWrite address to data.\n\t\nUseful when writing pointer fields of structures.\n\n@param target Target data to write address into\n@param ref Memory address to write\n@param offset Offset to write address into\n\t",
    "linenums": [
      551,
      552,
      553,
      554,
      555,
      556,
      557,
      558,
      559,
      560,
      561
    ]
  },
  {
    "comments": "@class CArrInfo\n\nA c sized array type information. It can be used for sturct field.\n\nFor function arguments, use CPtr instead.\n",
    "linenums": [
      572,
      573,
      574,
      575,
      576
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Field\n@readonly\n@field size\n\nThe total size of the array in bytes.\n\t",
    "linenums": [
      580,
      581,
      582,
      583,
      584,
      585
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Field\n@readonly\n@field length\n\nThe length of the array.\n\t",
    "linenums": [
      589,
      590,
      591,
      592,
      593,
      594
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Field\n@readonly\n@field inner\n\nThe inner element type of the array.\n\t",
    "linenums": [
      598,
      599,
      600,
      601,
      602,
      603
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method ptr\n\nCreate a pointer subtype.\n\n@return A pointer subtype\n\t",
    "linenums": [
      609,
      610,
      611,
      612,
      613,
      614,
      615
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method box\n\nCreate a box with initial values.\n\n@param table The array of field values\n@return A box\n\t",
    "linenums": [
      621,
      622,
      623,
      624,
      625,
      626,
      627,
      628
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method readData\n\nRead a lua table from reference or box.\n\n@param target Target to read data from\n@param offset Offset to read data from\n@return A table\n\t",
    "linenums": [
      632,
      633,
      634,
      635,
      636,
      637,
      638,
      639,
      640
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method writeData\n\nWrite a lua table into reference or box.\n\n@param target Target to write data into\n@param table Lua data to write\n@param offset Offset to write data into\n\t",
    "linenums": [
      644,
      645,
      646,
      647,
      648,
      649,
      650,
      651,
      652
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method copyData\n\t\nCopy values from the source and paste them into the target.\n\t\n@param dst Where the content will be pasted\n@param src The source data\n@param dstOffset The offset in the dst where the content will be pasted\n@param srcOffset The offset in the source data from where the content will be copied\n\t",
    "linenums": [
      661,
      662,
      663,
      664,
      665,
      666,
      667,
      668,
      669,
      670
    ]
  },
  {
    "comments": "@within CArrInfo\n@tag Method\n@method offset\n\nGet the byte offset of the field.\n\t\t\n@param index The element index\n@return The byte offset\n\t",
    "linenums": [
      682,
      683,
      684,
      685,
      686,
      687,
      688,
      689
    ]
  },
  {
    "comments": "@class CFnInfo\n\nA C function pointer type information, with function signature.\n\nFor struct field, array element, or function arguments, use `void:ptr()` instead.\n",
    "linenums": [
      695,
      696,
      697,
      698,
      699
    ]
  },
  {
    "comments": "@within CFnInfo\n@tag Field\n@readonly\n@field size\n\nThe size of a function pointer.\n\nEquivalent to `ffi.c.usize.size`.\n\t",
    "linenums": [
      703,
      704,
      705,
      706,
      707,
      708,
      709,
      710
    ]
  },
  {
    "comments": "@within CFnInfo\n@tag Method\n@method callable\n\nCreate a callable from reference.\n\n@return A callable\n\t",
    "linenums": [
      716,
      717,
      718,
      719,
      720,
      721,
      722
    ]
  },
  {
    "comments": "@within CFnInfo\n@tag Method\n@method closure\n\nCreate a closure from lua function.\n\nTo return some data, lua function should write value into ret reference.\n\n@return A closure\n\t",
    "linenums": [
      726,
      727,
      728,
      729,
      730,
      731,
      732,
      733,
      734
    ]
  },
  {
    "comments": "@class CStructInfo\n\nA c struct type information.\n",
    "linenums": [
      740,
      741,
      742
    ]
  },
  {
    "comments": "@within CStructInfo\n@tag Field\n@readonly\n@field size\n\nThe size of a struct, including padding.\n\t",
    "linenums": [
      746,
      747,
      748,
      749,
      750,
      751
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method arr\n\nCreate a struct array type.\n\n@param length The length of the array\n@return A struct array type\n\t",
    "linenums": [
      757,
      758,
      759,
      760,
      761,
      762,
      763,
      764
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method ptr\n\nCreate a struct pointer type.\n\n@return A struct pointer type\n\t",
    "linenums": [
      768,
      769,
      770,
      771,
      772,
      773,
      774
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method box\n\nCreate a box with initial value.\n\n@param table The array of field values\n@return A box\n\t",
    "linenums": [
      780,
      781,
      782,
      783,
      784,
      785,
      786,
      787
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method readData\n\nRead a lua table from reference or box.\n\n@param target Target to read data from\n@param offset Offset to read data from\n@return A table\n\t",
    "linenums": [
      791,
      792,
      793,
      794,
      795,
      796,
      797,
      798,
      799
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method writeData\n\nWrite a lua table into reference or box.\n\n@param target Target to write data into\n@param table Lua data to write\n@param offset Offset to write data into\n\t",
    "linenums": [
      803,
      804,
      805,
      806,
      807,
      808,
      809,
      810,
      811
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method copyData\n\nCopy values from the source and paste them into the target.\n\n@param dst Where the content will be pasted\n@param src The source data\n@param dstOffset The offset in the destination where the content will be pasted\n@param srcOffset The offset in the source data from where the content will be copied\n\t",
    "linenums": [
      820,
      821,
      822,
      823,
      824,
      825,
      826,
      827,
      828,
      829
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method offset\n\nGet the field offset.\n\n@param index The field index\n@return The byte offset\n\t",
    "linenums": [
      841,
      842,
      843,
      844,
      845,
      846,
      847,
      848
    ]
  },
  {
    "comments": "@within CSturctInfo\n@tag Method\n@method field\n\nGet the field type.\n\t\t\n@param index The field index\n@return The field type\n\t",
    "linenums": [
      852,
      853,
      854,
      855,
      856,
      857,
      858,
      859
    ]
  },
  {
    "comments": "@class CVoidInfo\n\nA type that represents c void. can only be used for the function return type.\n",
    "linenums": [
      865,
      866,
      867
    ]
  },
  {
    "comments": "@within CVoidInfo\n@tag Field\n@readonly\n@field size\n\nThe size of the void type. It is always 0.\n\t",
    "linenums": [
      871,
      872,
      873,
      874,
      875,
      876
    ]
  },
  {
    "comments": "@within CVoidInfo\n@tag Method\n@method ptr\n\nCreate a generic pointer type.\n\n@return Generic pointer type, equivalent to `*void` in C.\n\t",
    "linenums": [
      882,
      883,
      884,
      885,
      886,
      887,
      888
    ]
  },
  {
    "comments": "@prop u8 NumCType\n@within FFI\n@tag NumCType\n\nA 8-bit sized unsigned integer, Equivalent to `uint8_t` in `stdint`.\n",
    "linenums": [
      897,
      898,
      899,
      900,
      901
    ]
  },
  {
    "comments": "@prop u16 NumCType\n@within FFI\n@tag NumCType\n\nA 16-bit sized unsigned integer, Equivalent to `uint16_t` in `stdint`.\n",
    "linenums": [
      906,
      907,
      908,
      909,
      910
    ]
  },
  {
    "comments": "@prop u32 NumCType\n@within FFI\n@tag NumCType\n\nA 32-bit sized unsigned integer, Equivalent to `uint32_t` in `stdint`.\n",
    "linenums": [
      915,
      916,
      917,
      918,
      919
    ]
  },
  {
    "comments": "@prop u64 NumCType\n@within FFI\n@tag NumCType\n\nA 64-bit sized unsigned integer, Equivalent to `uint64_t` in `stdint`.\n",
    "linenums": [
      924,
      925,
      926,
      927,
      928
    ]
  },
  {
    "comments": "@prop u128 NumCType\n@within FFI\n@tag NumCType\n\nA 128-bit sized unsigned integer, Equivalent to `uint128_t` in `stdint`.\n",
    "linenums": [
      933,
      934,
      935,
      936,
      937
    ]
  },
  {
    "comments": "@prop i8 NumCType\n@within FFI\n@tag NumCType\n\nA 8-bit sized signed integer, Equivalent to `int8_t` in `stdint`.\n",
    "linenums": [
      942,
      943,
      944,
      945,
      946
    ]
  },
  {
    "comments": "@prop i16 NumCType\n@within FFI\n@tag NumCType\n\nA 16-bit sized signed integer, Equivalent to `int16_t` in `stdint`.\n",
    "linenums": [
      951,
      952,
      953,
      954,
      955
    ]
  },
  {
    "comments": "@prop i32 NumCType\n@within FFI\n@tag NumCType\n\nA 32-bit sized signed integer, Equivalent to `int32_t` in `stdint`.\n",
    "linenums": [
      960,
      961,
      962,
      963,
      964
    ]
  },
  {
    "comments": "@prop i64 NumCType\n@within FFI\n@tag NumCType\n\nA 64-bit sized signed integer, Equivalent to `int64_t` in `stdint`.\n",
    "linenums": [
      969,
      970,
      971,
      972,
      973
    ]
  },
  {
    "comments": "@prop i128 NumCType\n@within FFI\n@tag NumCType\n\nA 128-bit sized signed integer, Equivalent to `int128_t` in `stdint`.\n",
    "linenums": [
      978,
      979,
      980,
      981,
      982
    ]
  },
  {
    "comments": "@prop f32 NumCType\n@within FFI\n@tag NumCType\n\nA single-precision 32-bit sized floating-point, Almost always equivalent to `float` in C.\n",
    "linenums": [
      987,
      988,
      989,
      990,
      991
    ]
  },
  {
    "comments": "@prop f64 NumCType\n@within FFI\n@tag NumCType\n\nA double-precision 64-bit sized floating-point, Almost always equivalent to `double` in C.\n",
    "linenums": [
      996,
      997,
      998,
      999,
      1000
    ]
  },
  {
    "comments": "@prop usize NumCType\n@within FFI\n@tag NumCType\n\nA machine specific pointer sized unsigned integer.\n",
    "linenums": [
      1005,
      1006,
      1007,
      1008,
      1009
    ]
  },
  {
    "comments": "@prop isize NumCType\n@within FFI\n@tag NumCType\n\nA machine specific pointer sized signed integer.\n",
    "linenums": [
      1014,
      1015,
      1016,
      1017,
      1018
    ]
  },
  {
    "comments": "@prop char NumCType\n@within C\n\nCompiler defined C `char` type.\n\nThe signedness may differ depending on the compiler and platform.\n\nYou can get signedness by `signedness` field.\n",
    "linenums": [
      1026,
      1027,
      1028,
      1029,
      1030,
      1031,
      1032,
      1033
    ]
  },
  {
    "comments": "@prop uchar NumCType\n@within C\n\nCompiler defined C `unsigned char` type.\n\nMostly equivalent to `u8`.\n",
    "linenums": [
      1038,
      1039,
      1040,
      1041,
      1042,
      1043
    ]
  },
  {
    "comments": "@prop schar NumCType\n@within C\n\nCompiler defined C `signed char` type.\n",
    "linenums": [
      1048,
      1049,
      1050,
      1051
    ]
  },
  {
    "comments": "@prop short NumCType\n@within C\n\nCompiler defined C `short` type.\n",
    "linenums": [
      1056,
      1057,
      1058,
      1059
    ]
  },
  {
    "comments": "@prop ushort NumCType\n@within C\n\nCompiler defined C `unsigned short` type.\n",
    "linenums": [
      1064,
      1065,
      1066,
      1067
    ]
  },
  {
    "comments": "@prop int NumCType\n@within C\n\nCompiler defined C `int` type.\n\nThe side may differ depending on the compiler and platform.\n",
    "linenums": [
      1072,
      1073,
      1074,
      1075,
      1076,
      1077
    ]
  },
  {
    "comments": "@prop uint NumCType\n@within C\n\nCompiler defined C `unsigned int` type.\n\nThe side may differ depending on the compiler and platform.\n",
    "linenums": [
      1082,
      1083,
      1084,
      1085,
      1086,
      1087
    ]
  },
  {
    "comments": "@prop long NumCType\n@within C\n\nCompiler defined C `long` type.\n\nThe side may differ depending on the compiler and platform.\n",
    "linenums": [
      1092,
      1093,
      1094,
      1095,
      1096,
      1097
    ]
  },
  {
    "comments": "@prop ulong NumCType\n@within C\n\nCompiler defined C `unsigned long` type.\n\nThe side may differ depending on the compiler and platform.\n",
    "linenums": [
      1102,
      1103,
      1104,
      1105,
      1106,
      1107
    ]
  },
  {
    "comments": "@prop longlong NumCType\n@within C\n\nCompiler defined C `unsigned longlong` type.\n",
    "linenums": [
      1112,
      1113,
      1114,
      1115
    ]
  },
  {
    "comments": "@prop longlong NumCType\n@within C\n\nCompiler defined C `unsigned longlong` type.\n",
    "linenums": [
      1120,
      1121,
      1122,
      1123
    ]
  },
  {
    "comments": "@class CTypes\n\nAll possible C types.\n",
    "linenums": [
      1130,
      1131,
      1132
    ]
  },
  {
    "comments": "@within C\n\nCreate a function signature type information.\n\n@param args An array of CTypes represents the arguments of the function\n@param ret The return type of the function\n@return A function signature type information\n",
    "linenums": [
      1167,
      1168,
      1169,
      1170,
      1171,
      1172,
      1173
    ]
  },
  {
    "comments": "@within C\n\nCreate a struct type information.\n\n@param fields An array of CTypes represents the fields of the struct\n@return A struct type information\n",
    "linenums": [
      1180,
      1181,
      1182,
      1183,
      1184,
      1185
    ]
  },
  {
    "comments": "@within FFI\n\nCreate a `Ref` with address 0.\n\nCan be used for receive a pointer from external function or pass it as an argument.\n\n@return A zero initialized Ref\n",
    "linenums": [
      1192,
      1193,
      1194,
      1195,
      1196,
      1197,
      1198
    ]
  },
  {
    "comments": "@within FFI\n\nCreate a `Box` with specific size.\nThe created box is not filed with zero.\n\n@param size The size of the new box\n@return A allocated box\n",
    "linenums": [
      1205,
      1206,
      1207,
      1208,
      1209,
      1210,
      1211
    ]
  },
  {
    "comments": "@within FFI\n\nOpen a dynamic library.\n\n@param name The name of the target library\n@return A dynamic library handle\n",
    "linenums": [
      1218,
      1219,
      1220,
      1221,
      1222,
      1223
    ]
  },
  {
    "comments": "@within FFI\n\nReturn `true` if the second argument is an integer (i32).\n\n@param val A lua value to check\n@return Whether val is an integer or not\n",
    "linenums": [
      1230,
      1231,
      1232,
      1233,
      1234,
      1235
    ]
  },
  {
    "comments": "@within FFI\n\nFree referenced memory.\n\n@param data Target memory to free\n",
    "linenums": [
      1242,
      1243,
      1244,
      1245,
      1246
    ]
  },
  {
    "comments": "@class TEST\nCOMMENT\nCOMMENT\nCOMMENT\n",
    "linenums": [
      1252,
      1254,
      1256,
      1257
    ]
  }
]