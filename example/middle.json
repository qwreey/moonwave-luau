{
  "BoxData": [
    {
      "comments": "The size of the box.",
      "kind": "field",
      "line": 196,
      "name": "size",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 196,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 197,
          "tag": "tag"
        },
        {
          "line": 198,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 199,
          "tag": "field"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Fill the box with zero.",
      "kind": "method",
      "line": 206,
      "name": "zero",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 206,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 207,
          "tag": "tag"
        },
        {
          "content": "zero\n",
          "line": 208,
          "tag": "method"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 212,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Create a reference of the box after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
      "kind": "method",
      "line": 216,
      "name": "leak",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 216,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 217,
          "tag": "tag"
        },
        {
          "content": "leak\n",
          "line": 218,
          "tag": "method"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 224,
          "tag": "param"
        },
        {
          "content": "A reference of the box\n",
          "line": 225,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Create a reference of the box.\n\nThe created reference keeps the box from being garbage collected until the reference itself is collected.",
      "kind": "method",
      "line": 229,
      "name": "ref",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 229,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 230,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 231,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 232,
          "tag": "tag"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 238,
          "tag": "param"
        },
        {
          "content": "A reference of the box\n",
          "line": 239,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Copy content from another data with specific length.",
      "kind": "method",
      "line": 243,
      "name": "copyFrom",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 243,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 244,
          "tag": "tag"
        },
        {
          "content": "copyFrom\n",
          "line": 245,
          "tag": "method"
        },
        {
          "content": "src The source data\n",
          "line": 249,
          "tag": "param"
        },
        {
          "content": "length The amount of data to copy, in bytes\n",
          "line": 250,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 251,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 252,
          "tag": "param"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 253,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Read string from data with specific length without null termination.",
      "kind": "method",
      "line": 263,
      "name": "readString",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 263,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 264,
          "tag": "tag"
        },
        {
          "content": "readString\n",
          "line": 265,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 266,
          "tag": "tag"
        },
        {
          "content": "length The amount of data to read, in bytes\n",
          "line": 270,
          "tag": "param"
        },
        {
          "content": "offset Offset to read string from\n",
          "line": 271,
          "tag": "param"
        },
        {
          "content": "A string\n",
          "line": 272,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Write string into data without null termination.",
      "kind": "method",
      "line": 276,
      "name": "writeString",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 276,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 277,
          "tag": "tag"
        },
        {
          "content": "writeString\n",
          "line": 278,
          "tag": "method"
        },
        {
          "content": "src The source string\n",
          "line": 282,
          "tag": "param"
        },
        {
          "content": "length The amount of data to write, in bytes\n",
          "line": 283,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 284,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source string from where the content will be copied\n",
          "line": 285,
          "tag": "param"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 286,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    }
  ],
  "C": [
    {
      "comments": "Compiler defined C `char` type.\n\nThe signedness may differ depending on the compiler and platform.\n\nYou can get signedness by `signedness` field.",
      "kind": "prop",
      "line": 1062,
      "name": "char CTypeInfo",
      "tags": [
        {
          "content": "char CTypeInfo\n",
          "line": 1062,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1063,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned char` type.\n\nMostly equivalent to `u8`.",
      "kind": "prop",
      "line": 1074,
      "name": "uchar CTypeInfo",
      "tags": [
        {
          "content": "uchar CTypeInfo\n",
          "line": 1074,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1075,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `signed char` type.",
      "kind": "prop",
      "line": 1084,
      "name": "schar CTypeInfo",
      "tags": [
        {
          "content": "schar CTypeInfo\n",
          "line": 1084,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1085,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `short` type.",
      "kind": "prop",
      "line": 1092,
      "name": "short CTypeInfo",
      "tags": [
        {
          "content": "short CTypeInfo\n",
          "line": 1092,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1093,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned short` type.",
      "kind": "prop",
      "line": 1100,
      "name": "ushort CTypeInfo",
      "tags": [
        {
          "content": "ushort CTypeInfo\n",
          "line": 1100,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1101,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `int` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1108,
      "name": "int CTypeInfo",
      "tags": [
        {
          "content": "int CTypeInfo\n",
          "line": 1108,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1109,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned int` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1118,
      "name": "uint CTypeInfo",
      "tags": [
        {
          "content": "uint CTypeInfo\n",
          "line": 1118,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1119,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `long` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1128,
      "name": "long CTypeInfo",
      "tags": [
        {
          "content": "long CTypeInfo\n",
          "line": 1128,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1129,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned long` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1138,
      "name": "ulong CTypeInfo",
      "tags": [
        {
          "content": "ulong CTypeInfo\n",
          "line": 1138,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1139,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned longlong` type.",
      "kind": "prop",
      "line": 1148,
      "name": "longlong CTypeInfo",
      "tags": [
        {
          "content": "longlong CTypeInfo\n",
          "line": 1148,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1149,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned longlong` type.",
      "kind": "prop",
      "line": 1156,
      "name": "longlong CTypeInfo",
      "tags": [
        {
          "content": "longlong CTypeInfo\n",
          "line": 1156,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1157,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Create a function signature type information.",
      "kind": "function",
      "line": 1203,
      "name": "fn",
      "tags": [
        {
          "content": "C\n",
          "line": 1203,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1204,
          "tag": "tag"
        },
        {
          "content": "args An array of CTypes represents the arguments of the function\n",
          "line": 1208,
          "tag": "param"
        },
        {
          "content": "ret The return type of the function\n",
          "line": 1209,
          "tag": "param"
        },
        {
          "content": "A function signature type information\n",
          "line": 1210,
          "tag": "return"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Create a struct type information.",
      "kind": "function",
      "line": 1217,
      "name": "struct",
      "tags": [
        {
          "content": "C\n",
          "line": 1217,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1218,
          "tag": "tag"
        },
        {
          "content": "fields An array of CTypes represents the fields of the struct\n",
          "line": 1222,
          "tag": "param"
        },
        {
          "content": "A struct type information\n",
          "line": 1223,
          "tag": "return"
        }
      ],
      "within": "C"
    }
  ],
  "CArrInfo": [
    {
      "comments": "The total size of the array in bytes.",
      "kind": "field",
      "line": 616,
      "name": "size",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 616,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 617,
          "tag": "tag"
        },
        {
          "line": 618,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 619,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "The length of the array.",
      "kind": "field",
      "line": 625,
      "name": "length",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 625,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 626,
          "tag": "tag"
        },
        {
          "line": 627,
          "tag": "readonly"
        },
        {
          "content": "length\n",
          "line": 628,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "The inner element type of the array.",
      "kind": "field",
      "line": 634,
      "name": "inner",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 634,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 635,
          "tag": "tag"
        },
        {
          "line": 636,
          "tag": "readonly"
        },
        {
          "content": "inner\n",
          "line": 637,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 645,
      "name": "ptr",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 645,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 646,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 647,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 648,
          "tag": "tag"
        },
        {
          "content": "A pointer subtype\n",
          "line": 652,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Create a box with initial values.",
      "kind": "method",
      "line": 658,
      "name": "box",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 658,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 659,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 660,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 661,
          "tag": "tag"
        },
        {
          "content": "table The array of field values\n",
          "line": 665,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 666,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Read a lua table from reference or box.",
      "kind": "method",
      "line": 670,
      "name": "readData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 670,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 671,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 672,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 673,
          "tag": "tag"
        },
        {
          "content": "target Target to read data from\n",
          "line": 677,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 678,
          "tag": "param"
        },
        {
          "content": "A table\n",
          "line": 679,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Write a lua table into reference or box.",
      "kind": "method",
      "line": 683,
      "name": "writeData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 683,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 684,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 685,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 686,
          "tag": "tag"
        },
        {
          "content": "target Target to write data into\n",
          "line": 690,
          "tag": "param"
        },
        {
          "content": "table Lua data to write\n",
          "line": 691,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 692,
          "tag": "param"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 701,
      "name": "copyData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 701,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 702,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 703,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 707,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 708,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the dst where the content will be pasted\n",
          "line": 709,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 710,
          "tag": "param"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Get the byte offset of the field.",
      "kind": "method",
      "line": 722,
      "name": "offset",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 722,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 723,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 724,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 725,
          "tag": "tag"
        },
        {
          "content": "index The element index\n",
          "line": 729,
          "tag": "param"
        },
        {
          "content": "The byte offset\n",
          "line": 730,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    }
  ],
  "CFnInfo": [
    {
      "comments": "The size of a function pointer.\n\nEquivalent to `ffi.c.usize.size`.",
      "kind": "field",
      "line": 744,
      "name": "size",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 744,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 745,
          "tag": "tag"
        },
        {
          "line": 746,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 747,
          "tag": "field"
        }
      ],
      "within": "CFnInfo"
    },
    {
      "comments": "Create a callable from reference.",
      "kind": "method",
      "line": 757,
      "name": "callable",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 757,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 758,
          "tag": "tag"
        },
        {
          "content": "callable\n",
          "line": 759,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 760,
          "tag": "tag"
        },
        {
          "content": "A callable\n",
          "line": 764,
          "tag": "return"
        }
      ],
      "within": "CFnInfo"
    },
    {
      "comments": "Create a closure from lua function.\n\nTo return some data, lua function should write value into ret reference.",
      "kind": "method",
      "line": 768,
      "name": "closure",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 768,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 769,
          "tag": "tag"
        },
        {
          "content": "closure\n",
          "line": 770,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 771,
          "tag": "tag"
        },
        {
          "content": "A closure\n",
          "line": 777,
          "tag": "return"
        }
      ],
      "within": "CFnInfo"
    }
  ],
  "CPtrInfo": [
    {
      "comments": "The size of a pointer. should be the same for all pointers.\n\nEquivalent to `ffi.c.usize.size`.",
      "kind": "field",
      "line": 514,
      "name": "size",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 514,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 515,
          "tag": "tag"
        },
        {
          "line": 516,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 517,
          "tag": "field"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "The inner type of the pointer.",
      "kind": "field",
      "line": 525,
      "name": "inner",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 525,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 526,
          "tag": "tag"
        },
        {
          "line": 527,
          "tag": "readonly"
        },
        {
          "content": "inner\n",
          "line": 528,
          "tag": "field"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Create an array subtype with specific length.",
      "kind": "method",
      "line": 537,
      "name": "arr",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 537,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 538,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 539,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 540,
          "tag": "tag"
        },
        {
          "content": "length The length of the array\n",
          "line": 544,
          "tag": "param"
        },
        {
          "content": "An array subtype\n",
          "line": 545,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 550,
      "name": "ptr",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 550,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 551,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 552,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 553,
          "tag": "tag"
        },
        {
          "content": "A pointer subtype\n",
          "line": 557,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Read address from data, then return RefData.\n\nUseful when reading pointer fields of structures.\n\nIf the `ref` argument is given, rather than create new RefData, update it.",
      "kind": "method",
      "line": 563,
      "name": "readRef",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 563,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 564,
          "tag": "tag"
        },
        {
          "content": "readRef\n",
          "line": 565,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 566,
          "tag": "tag"
        },
        {
          "content": "target Target data to read address from\n",
          "line": 574,
          "tag": "param"
        },
        {
          "content": "offset Offset to read address from\n",
          "line": 575,
          "tag": "param"
        },
        {
          "content": "ref RefData to update\n",
          "line": 576,
          "tag": "param"
        },
        {
          "content": "A lua value\n",
          "line": 577,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Write address to data.\n\t\nUseful when writing pointer fields of structures.",
      "kind": "method",
      "line": 586,
      "name": "writeRef",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 586,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 587,
          "tag": "tag"
        },
        {
          "content": "writeRef\n",
          "line": 588,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 589,
          "tag": "tag"
        },
        {
          "content": "target Target data to write address into\n",
          "line": 595,
          "tag": "param"
        },
        {
          "content": "ref Memory address to write\n",
          "line": 596,
          "tag": "param"
        },
        {
          "content": "offset Offset to write address into\n",
          "line": 597,
          "tag": "param"
        }
      ],
      "within": "CPtrInfo"
    }
  ],
  "CStructInfo": [
    {
      "comments": "The size of a struct, including padding.",
      "kind": "field",
      "line": 789,
      "name": "size",
      "tags": [
        {
          "content": "CStructInfo\n",
          "line": 789,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 790,
          "tag": "tag"
        },
        {
          "line": 791,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 792,
          "tag": "field"
        }
      ],
      "within": "CStructInfo"
    }
  ],
  "CSturctInfo": [
    {
      "comments": "Create a struct array type.",
      "kind": "method",
      "line": 800,
      "name": "arr",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 800,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 801,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 802,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 803,
          "tag": "tag"
        },
        {
          "content": "length The length of the array\n",
          "line": 807,
          "tag": "param"
        },
        {
          "content": "A struct array type\n",
          "line": 808,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Create a struct pointer type.",
      "kind": "method",
      "line": 812,
      "name": "ptr",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 812,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 813,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 814,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 815,
          "tag": "tag"
        },
        {
          "content": "A struct pointer type\n",
          "line": 819,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Create a box with initial value.",
      "kind": "method",
      "line": 825,
      "name": "box",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 825,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 826,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 827,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 828,
          "tag": "tag"
        },
        {
          "content": "table The array of field values\n",
          "line": 832,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 833,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Read a lua table from reference or box.",
      "kind": "method",
      "line": 837,
      "name": "readData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 837,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 838,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 839,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 840,
          "tag": "tag"
        },
        {
          "content": "target Target to read data from\n",
          "line": 844,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 845,
          "tag": "param"
        },
        {
          "content": "A table\n",
          "line": 846,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Write a lua table into reference or box.",
      "kind": "method",
      "line": 850,
      "name": "writeData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 850,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 851,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 852,
          "tag": "method"
        },
        {
          "content": "target Target to write data into\n",
          "line": 856,
          "tag": "param"
        },
        {
          "content": "table Lua data to write\n",
          "line": 857,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 858,
          "tag": "param"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 867,
      "name": "copyData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 867,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 868,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 869,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 873,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 874,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 875,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 876,
          "tag": "param"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Get the field offset.",
      "kind": "method",
      "line": 888,
      "name": "offset",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 888,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 889,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 890,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 891,
          "tag": "tag"
        },
        {
          "content": "index The field index\n",
          "line": 895,
          "tag": "param"
        },
        {
          "content": "The byte offset\n",
          "line": 896,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Get the field type.",
      "kind": "method",
      "line": 900,
      "name": "field",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 900,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 901,
          "tag": "tag"
        },
        {
          "content": "field\n",
          "line": 902,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 903,
          "tag": "tag"
        },
        {
          "content": "index The field index\n",
          "line": 907,
          "tag": "param"
        },
        {
          "content": "The field type\n",
          "line": 908,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    }
  ],
  "CTypeInfo": [
    {
      "comments": "The size of the type in bytes.",
      "kind": "field",
      "line": 365,
      "name": "size",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 365,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 366,
          "tag": "tag"
        },
        {
          "line": 367,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 368,
          "tag": "field"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "The signedness of the type.",
      "kind": "field",
      "line": 374,
      "name": "signedness",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 374,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 375,
          "tag": "tag"
        },
        {
          "line": 376,
          "tag": "readonly"
        },
        {
          "content": "signedness\n",
          "line": 377,
          "tag": "field"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 385,
      "name": "ptr",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 385,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 386,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 387,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 388,
          "tag": "tag"
        },
        {
          "content": "A pointer subtype\n",
          "line": 392,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create an array subtype with specific length.",
      "kind": "method",
      "line": 396,
      "name": "arr",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 396,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 397,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 398,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 399,
          "tag": "tag"
        },
        {
          "content": "length The length of the array\n",
          "line": 403,
          "tag": "param"
        },
        {
          "content": "An array subtype\n",
          "line": 404,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create a box with initial values.",
      "kind": "method",
      "line": 410,
      "name": "box",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 410,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 411,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 412,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 413,
          "tag": "tag"
        },
        {
          "content": "table The array of element values\n",
          "line": 417,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 418,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Read a lua value from reference or box.",
      "kind": "method",
      "line": 422,
      "name": "readData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 422,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 423,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 424,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 425,
          "tag": "tag"
        },
        {
          "content": "target Target to read data from\n",
          "line": 429,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 430,
          "tag": "param"
        },
        {
          "content": "A lua value\n",
          "line": 431,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Write a lua value into reference or box.",
      "kind": "method",
      "line": 435,
      "name": "writeData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 435,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 436,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 437,
          "tag": "method"
        },
        {
          "content": "target Target to write data into\n",
          "line": 441,
          "tag": "param"
        },
        {
          "content": "value Lua data to write\n",
          "line": 442,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 443,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 447,
      "name": "copyData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 447,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 448,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 449,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 453,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 454,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 455,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 456,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Stringify data. Useful when output numbers, which Luau can't handle.",
      "kind": "method",
      "line": 466,
      "name": "stringifyData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 466,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 467,
          "tag": "tag"
        },
        {
          "content": "stringifyData\n",
          "line": 468,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 469,
          "tag": "tag"
        },
        {
          "content": "target The target data\n",
          "line": 473,
          "tag": "param"
        },
        {
          "content": "offset Offset to stringify data from\n",
          "line": 474,
          "tag": "param"
        },
        {
          "content": "A stringified data\n",
          "line": 475,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Casting data to different type.\n\nMay result in loss of precision.",
      "kind": "method",
      "line": 482,
      "name": "cast",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 482,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 483,
          "tag": "tag"
        },
        {
          "content": "cast\n",
          "line": 484,
          "tag": "method"
        },
        {
          "content": "intoType The target type to convert to\n",
          "line": 490,
          "tag": "param"
        },
        {
          "content": "fromData Source data to be converted\n",
          "line": 491,
          "tag": "param"
        },
        {
          "content": "intoData Target to write converted data into\n",
          "line": 492,
          "tag": "param"
        },
        {
          "content": "fromOffset The offset in the source data\n",
          "line": 493,
          "tag": "param"
        },
        {
          "content": "intoOffset The offset in the destination\n",
          "line": 494,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    }
  ],
  "CTypes": {
    "self": {
      "comments": "All possible C types.",
      "kind": "class",
      "line": 1166,
      "name": "CTypes",
      "tags": [
        {
          "content": "CTypes\n",
          "line": 1166,
          "tag": "class"
        }
      ],
      "within": "CTypes"
    }
  },
  "CVoidInfo": [
    {
      "comments": "The size of the void type. It is always 0.",
      "kind": "field",
      "line": 920,
      "name": "size",
      "tags": [
        {
          "content": "CVoidInfo\n",
          "line": 920,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 921,
          "tag": "tag"
        },
        {
          "line": 922,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 923,
          "tag": "field"
        }
      ],
      "within": "CVoidInfo"
    },
    {
      "comments": "Create a generic pointer type.",
      "kind": "method",
      "line": 931,
      "name": "ptr",
      "tags": [
        {
          "content": "CVoidInfo\n",
          "line": 931,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 932,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 933,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 934,
          "tag": "tag"
        },
        {
          "content": "Generic pointer type, equivalent to `*void` in C.\n",
          "line": 938,
          "tag": "return"
        }
      ],
      "within": "CVoidInfo"
    }
  ],
  "CallableData": {
    "self": {
      "comments": "A callable external function.\n\nTo call external function, provide memory for save the return value and references for the arguments.\n\nIf return type is `void`, pass `nil`.",
      "kind": "class",
      "line": 318,
      "name": "CallableData",
      "tags": [
        {
          "content": "CallableData\n",
          "line": 318,
          "tag": "class"
        }
      ],
      "within": "CallableData"
    }
  },
  "ClosureData": [
    {
      "comments": "Create a reference of the closure. usually can be used for passing function pointer as argument.\n\nThe created reference keeps the closure from being garbage collected until the reference itself is collected.",
      "kind": "method",
      "line": 341,
      "name": "ref",
      "tags": [
        {
          "content": "ClosureData\n",
          "line": 341,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 342,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 343,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 344,
          "tag": "tag"
        },
        {
          "content": "A reference of the closure\n",
          "line": 350,
          "tag": "return"
        }
      ],
      "within": "ClosureData"
    }
  ],
  "FFI": [
    {
      "comments": "Namespace for compile time sized c types.",
      "kind": "prop",
      "line": 54,
      "name": "C C",
      "tags": [
        {
          "content": "C C\n",
          "line": 54,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 55,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 8-bit sized unsigned integer, Equivalent to `uint8_t` in `stdint`.",
      "kind": "prop",
      "line": 947,
      "name": "u8 CTypeInfo",
      "tags": [
        {
          "content": "u8 CTypeInfo\n",
          "line": 947,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 948,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 16-bit sized unsigned integer, Equivalent to `uint16_t` in `stdint`.",
      "kind": "prop",
      "line": 955,
      "name": "u16 CTypeInfo",
      "tags": [
        {
          "content": "u16 CTypeInfo\n",
          "line": 955,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 956,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 32-bit sized unsigned integer, Equivalent to `uint32_t` in `stdint`.",
      "kind": "prop",
      "line": 963,
      "name": "u32 CTypeInfo",
      "tags": [
        {
          "content": "u32 CTypeInfo\n",
          "line": 963,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 964,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 64-bit sized unsigned integer, Equivalent to `uint64_t` in `stdint`.",
      "kind": "prop",
      "line": 971,
      "name": "u64 CTypeInfo",
      "tags": [
        {
          "content": "u64 CTypeInfo\n",
          "line": 971,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 972,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 128-bit sized unsigned integer, Equivalent to `uint128_t` in `stdint`.",
      "kind": "prop",
      "line": 979,
      "name": "u128 CTypeInfo",
      "tags": [
        {
          "content": "u128 CTypeInfo\n",
          "line": 979,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 980,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 8-bit sized signed integer, Equivalent to `int8_t` in `stdint`.",
      "kind": "prop",
      "line": 987,
      "name": "i8 CTypeInfo",
      "tags": [
        {
          "content": "i8 CTypeInfo\n",
          "line": 987,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 988,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 16-bit sized signed integer, Equivalent to `int16_t` in `stdint`.",
      "kind": "prop",
      "line": 995,
      "name": "i16 CTypeInfo",
      "tags": [
        {
          "content": "i16 CTypeInfo\n",
          "line": 995,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 996,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 32-bit sized signed integer, Equivalent to `int32_t` in `stdint`.",
      "kind": "prop",
      "line": 1003,
      "name": "i32 CTypeInfo",
      "tags": [
        {
          "content": "i32 CTypeInfo\n",
          "line": 1003,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1004,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 64-bit sized signed integer, Equivalent to `int64_t` in `stdint`.",
      "kind": "prop",
      "line": 1011,
      "name": "i64 CTypeInfo",
      "tags": [
        {
          "content": "i64 CTypeInfo\n",
          "line": 1011,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1012,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 128-bit sized signed integer, Equivalent to `int128_t` in `stdint`.",
      "kind": "prop",
      "line": 1019,
      "name": "i128 CTypeInfo",
      "tags": [
        {
          "content": "i128 CTypeInfo\n",
          "line": 1019,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1020,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A single-precision 32-bit sized floating-point, Almost always equivalent to `float` in C.",
      "kind": "prop",
      "line": 1027,
      "name": "f32 CTypeInfo",
      "tags": [
        {
          "content": "f32 CTypeInfo\n",
          "line": 1027,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1028,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A double-precision 64-bit sized floating-point, Almost always equivalent to `double` in C.",
      "kind": "prop",
      "line": 1035,
      "name": "f64 CTypeInfo",
      "tags": [
        {
          "content": "f64 CTypeInfo\n",
          "line": 1035,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1036,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A machine specific pointer sized unsigned integer.",
      "kind": "prop",
      "line": 1043,
      "name": "usize CTypeInfo",
      "tags": [
        {
          "content": "usize CTypeInfo\n",
          "line": 1043,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1044,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A machine specific pointer sized signed integer.",
      "kind": "prop",
      "line": 1051,
      "name": "isize CTypeInfo",
      "tags": [
        {
          "content": "isize CTypeInfo\n",
          "line": 1051,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1052,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Create a `Ref` with address 0.\n\nCan be used for receive a pointer from external function or pass it as an argument.",
      "kind": "function",
      "line": 1230,
      "name": "nullRef",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1230,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1231,
          "tag": "tag"
        },
        {
          "content": "A zero initialized Ref\n",
          "line": 1237,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Create a `Box` with specific size.\nThe created box is not filed with zero.",
      "kind": "function",
      "line": 1244,
      "name": "box",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1244,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1245,
          "tag": "tag"
        },
        {
          "content": "size The size of the new box\n",
          "line": 1250,
          "tag": "param"
        },
        {
          "content": "A allocated box\n",
          "line": 1251,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Open a dynamic library.",
      "kind": "function",
      "line": 1258,
      "name": "open",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1258,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1259,
          "tag": "tag"
        },
        {
          "content": "name The name of the target library\n",
          "line": 1263,
          "tag": "param"
        },
        {
          "content": "A dynamic library handle\n",
          "line": 1264,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Return `true` if the second argument is an integer (i32).",
      "kind": "function",
      "line": 1271,
      "name": "isInteger",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1271,
          "tag": "within"
        },
        {
          "content": "must_use\n",
          "line": 1272,
          "tag": "tag"
        },
        {
          "content": "val A lua value to check\n",
          "line": 1276,
          "tag": "param"
        },
        {
          "content": "Whether val is an integer or not\n",
          "line": 1277,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Free referenced memory.",
      "kind": "function",
      "line": 1284,
      "name": "free",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1284,
          "tag": "within"
        },
        {
          "content": "data Target memory to free\n",
          "line": 1288,
          "tag": "param"
        }
      ],
      "within": "FFI"
    }
  ],
  "LibData": [
    {
      "comments": "Find a symbol from the dynamic library.",
      "kind": "method",
      "line": 304,
      "name": "find",
      "tags": [
        {
          "content": "LibData\n",
          "line": 304,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 305,
          "tag": "tag"
        },
        {
          "content": "find\n",
          "line": 306,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 307,
          "tag": "tag"
        },
        {
          "content": "sym The name of the symbol\n",
          "line": 311,
          "tag": "param"
        },
        {
          "content": "A `Ref` of the found symbol\n",
          "line": 312,
          "tag": "return"
        }
      ],
      "within": "LibData"
    }
  ],
  "RefData": [
    {
      "comments": "Create a RefData by dereference this reference.\nThe created reference has no boundaries and has no restrictions.\n\nThis method is unsafe.",
      "kind": "method",
      "line": 71,
      "name": "deref",
      "tags": [
        {
          "content": "RefData\n",
          "line": 71,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 72,
          "tag": "tag"
        },
        {
          "content": "deref\n",
          "line": 73,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 74,
          "tag": "tag"
        },
        {
          "content": "A dereferenced `RefData`\n",
          "line": 81,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference with specific offset from this reference.\n\nThe created reference can be GCed and holds same data.",
      "kind": "method",
      "line": 85,
      "name": "offset",
      "tags": [
        {
          "content": "RefData\n",
          "line": 85,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 86,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 87,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 88,
          "tag": "tag"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 94,
          "tag": "param"
        },
        {
          "content": "A offseted reference\n",
          "line": 95,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference of this reference.\n\nThe created reference keeps the target reference from being garbage collected until created reference itself is collected.",
      "kind": "method",
      "line": 99,
      "name": "ref",
      "tags": [
        {
          "content": "RefData\n",
          "line": 99,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 100,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 101,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 102,
          "tag": "tag"
        },
        {
          "content": "A reference of this reference\n",
          "line": 108,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference of this reference after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
      "kind": "method",
      "line": 112,
      "name": "leak",
      "tags": [
        {
          "content": "RefData\n",
          "line": 112,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 113,
          "tag": "tag"
        },
        {
          "content": "leak\n",
          "line": 114,
          "tag": "method"
        },
        {
          "content": "A reference of this reference\n",
          "line": 120,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Check reference is null or not.",
      "kind": "method",
      "line": 124,
      "name": "isNull",
      "tags": [
        {
          "content": "RefData\n",
          "line": 124,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 125,
          "tag": "tag"
        },
        {
          "content": "isNull\n",
          "line": 126,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 127,
          "tag": "tag"
        },
        {
          "content": "Whether reference is null or not\n",
          "line": 131,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Copy content from another data with specific length.",
      "kind": "method",
      "line": 135,
      "name": "copyFrom",
      "tags": [
        {
          "content": "RefData\n",
          "line": 135,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 136,
          "tag": "tag"
        },
        {
          "content": "copyFrom\n",
          "line": 137,
          "tag": "method"
        },
        {
          "content": "src The source data\n",
          "line": 141,
          "tag": "param"
        },
        {
          "content": "length The amount of data to copy, in bytes\n",
          "line": 142,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 143,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 144,
          "tag": "param"
        },
        {
          "content": "`RefData` itself for convenience\n",
          "line": 145,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Read string from data with specific length without null termination.",
      "kind": "method",
      "line": 155,
      "name": "readString",
      "tags": [
        {
          "content": "RefData\n",
          "line": 155,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 156,
          "tag": "tag"
        },
        {
          "content": "readString\n",
          "line": 157,
          "tag": "method"
        },
        {
          "content": "must_use\n",
          "line": 158,
          "tag": "tag"
        },
        {
          "content": "length The amount of data to read, in bytes\n",
          "line": 162,
          "tag": "param"
        },
        {
          "content": "offset Offset to read string from\n",
          "line": 163,
          "tag": "param"
        },
        {
          "content": "A string\n",
          "line": 164,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Write string into data without null termination.",
      "kind": "method",
      "line": 168,
      "name": "writeString",
      "tags": [
        {
          "content": "RefData\n",
          "line": 168,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 169,
          "tag": "tag"
        },
        {
          "content": "writeString\n",
          "line": 170,
          "tag": "method"
        },
        {
          "content": "src The source string\n",
          "line": 174,
          "tag": "param"
        },
        {
          "content": "length The amount of data to write, in bytes\n",
          "line": 175,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 176,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source string from where the content will be copied\n",
          "line": 177,
          "tag": "param"
        },
        {
          "content": "`RefData` itself for convenience\n",
          "line": 178,
          "tag": "return"
        }
      ],
      "within": "RefData"
    }
  ]
}