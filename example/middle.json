{
  "BoxData": [
    {
      "comments": "The size of the box.",
      "kind": "field",
      "line": 191,
      "name": "size",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 191,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 192,
          "tag": "tag"
        },
        {
          "line": 193,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 194,
          "tag": "field"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Fill the box with zero.",
      "kind": "method",
      "line": 201,
      "name": "zero",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 201,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 202,
          "tag": "tag"
        },
        {
          "content": "zero\n",
          "line": 203,
          "tag": "method"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 207,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Create a reference of the box after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
      "kind": "method",
      "line": 211,
      "name": "leak",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 211,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 212,
          "tag": "tag"
        },
        {
          "content": "leak\n",
          "line": 213,
          "tag": "method"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 219,
          "tag": "param"
        },
        {
          "content": "A reference of the box\n",
          "line": 220,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Create a reference of the box.\n\nThe created reference keeps the box from being garbage collected until the reference itself is collected.",
      "kind": "method",
      "line": 224,
      "name": "ref",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 224,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 225,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 226,
          "tag": "method"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 232,
          "tag": "param"
        },
        {
          "content": "A reference of the box\n",
          "line": 233,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Copy content from another data with specific length.",
      "kind": "method",
      "line": 237,
      "name": "copyFrom",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 237,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 238,
          "tag": "tag"
        },
        {
          "content": "copyFrom\n",
          "line": 239,
          "tag": "method"
        },
        {
          "content": "src The source data\n",
          "line": 243,
          "tag": "param"
        },
        {
          "content": "length The amount of data to copy, in bytes\n",
          "line": 244,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 245,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 246,
          "tag": "param"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 247,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Read string from data with specific length without null termination.",
      "kind": "method",
      "line": 257,
      "name": "readString",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 257,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 258,
          "tag": "tag"
        },
        {
          "content": "readString\n",
          "line": 259,
          "tag": "method"
        },
        {
          "content": "length The amount of data to read, in bytes\n",
          "line": 263,
          "tag": "param"
        },
        {
          "content": "offset Offset to read string from\n",
          "line": 264,
          "tag": "param"
        },
        {
          "content": "A string\n",
          "line": 265,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    },
    {
      "comments": "Write string into data without null termination.",
      "kind": "method",
      "line": 269,
      "name": "writeString",
      "tags": [
        {
          "content": "BoxData\n",
          "line": 269,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 270,
          "tag": "tag"
        },
        {
          "content": "writeString\n",
          "line": 271,
          "tag": "method"
        },
        {
          "content": "src The source string\n",
          "line": 275,
          "tag": "param"
        },
        {
          "content": "length The amount of data to write, in bytes\n",
          "line": 276,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 277,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source string from where the content will be copied\n",
          "line": 278,
          "tag": "param"
        },
        {
          "content": "`BoxData` itself for convenience\n",
          "line": 279,
          "tag": "return"
        }
      ],
      "within": "BoxData"
    }
  ],
  "C": [
    {
      "comments": "Compiler defined C `char` type.\n\nThe signedness may differ depending on the compiler and platform.\n\nYou can get signedness by `signedness` field.",
      "kind": "prop",
      "line": 1029,
      "name": "char CTypeInfo",
      "tags": [
        {
          "content": "char CTypeInfo\n",
          "line": 1029,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1030,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned char` type.\n\nMostly equivalent to `u8`.",
      "kind": "prop",
      "line": 1041,
      "name": "uchar CTypeInfo",
      "tags": [
        {
          "content": "uchar CTypeInfo\n",
          "line": 1041,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1042,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `signed char` type.",
      "kind": "prop",
      "line": 1051,
      "name": "schar CTypeInfo",
      "tags": [
        {
          "content": "schar CTypeInfo\n",
          "line": 1051,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1052,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `short` type.",
      "kind": "prop",
      "line": 1059,
      "name": "short CTypeInfo",
      "tags": [
        {
          "content": "short CTypeInfo\n",
          "line": 1059,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1060,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned short` type.",
      "kind": "prop",
      "line": 1067,
      "name": "ushort CTypeInfo",
      "tags": [
        {
          "content": "ushort CTypeInfo\n",
          "line": 1067,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1068,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `int` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1075,
      "name": "int CTypeInfo",
      "tags": [
        {
          "content": "int CTypeInfo\n",
          "line": 1075,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1076,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned int` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1085,
      "name": "uint CTypeInfo",
      "tags": [
        {
          "content": "uint CTypeInfo\n",
          "line": 1085,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1086,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `long` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1095,
      "name": "long CTypeInfo",
      "tags": [
        {
          "content": "long CTypeInfo\n",
          "line": 1095,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1096,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned long` type.\n\nThe side may differ depending on the compiler and platform.",
      "kind": "prop",
      "line": 1105,
      "name": "ulong CTypeInfo",
      "tags": [
        {
          "content": "ulong CTypeInfo\n",
          "line": 1105,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1106,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned longlong` type.",
      "kind": "prop",
      "line": 1115,
      "name": "longlong CTypeInfo",
      "tags": [
        {
          "content": "longlong CTypeInfo\n",
          "line": 1115,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1116,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Compiler defined C `unsigned longlong` type.",
      "kind": "prop",
      "line": 1123,
      "name": "longlong CTypeInfo",
      "tags": [
        {
          "content": "longlong CTypeInfo\n",
          "line": 1123,
          "tag": "prop"
        },
        {
          "content": "C\n",
          "line": 1124,
          "tag": "within"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Create a function signature type information.",
      "kind": "function",
      "line": 1170,
      "name": "fn",
      "tags": [
        {
          "content": "C\n",
          "line": 1170,
          "tag": "within"
        },
        {
          "content": "args An array of CTypes represents the arguments of the function\n",
          "line": 1174,
          "tag": "param"
        },
        {
          "content": "ret The return type of the function\n",
          "line": 1175,
          "tag": "param"
        },
        {
          "content": "A function signature type information\n",
          "line": 1176,
          "tag": "return"
        }
      ],
      "within": "C"
    },
    {
      "comments": "Create a struct type information.",
      "kind": "function",
      "line": 1183,
      "name": "struct",
      "tags": [
        {
          "content": "C\n",
          "line": 1183,
          "tag": "within"
        },
        {
          "content": "fields An array of CTypes represents the fields of the struct\n",
          "line": 1187,
          "tag": "param"
        },
        {
          "content": "A struct type information\n",
          "line": 1188,
          "tag": "return"
        }
      ],
      "within": "C"
    }
  ],
  "CArrInfo": [
    {
      "comments": "The total size of the array in bytes.",
      "kind": "field",
      "line": 597,
      "name": "size",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 597,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 598,
          "tag": "tag"
        },
        {
          "line": 599,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 600,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "The length of the array.",
      "kind": "field",
      "line": 606,
      "name": "length",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 606,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 607,
          "tag": "tag"
        },
        {
          "line": 608,
          "tag": "readonly"
        },
        {
          "content": "length\n",
          "line": 609,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "The inner element type of the array.",
      "kind": "field",
      "line": 615,
      "name": "inner",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 615,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 616,
          "tag": "tag"
        },
        {
          "line": 617,
          "tag": "readonly"
        },
        {
          "content": "inner\n",
          "line": 618,
          "tag": "field"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 626,
      "name": "ptr",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 626,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 627,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 628,
          "tag": "method"
        },
        {
          "content": "A pointer subtype\n",
          "line": 632,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Create a box with initial values.",
      "kind": "method",
      "line": 638,
      "name": "box",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 638,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 639,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 640,
          "tag": "method"
        },
        {
          "content": "table The array of field values\n",
          "line": 644,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 645,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Read a lua table from reference or box.",
      "kind": "method",
      "line": 649,
      "name": "readData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 649,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 650,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 651,
          "tag": "method"
        },
        {
          "content": "target Target to read data from\n",
          "line": 655,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 656,
          "tag": "param"
        },
        {
          "content": "A table\n",
          "line": 657,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Write a lua table into reference or box.",
      "kind": "method",
      "line": 661,
      "name": "writeData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 661,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 662,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 663,
          "tag": "method"
        },
        {
          "content": "target Target to write data into\n",
          "line": 667,
          "tag": "param"
        },
        {
          "content": "table Lua data to write\n",
          "line": 668,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 669,
          "tag": "param"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 678,
      "name": "copyData",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 678,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 679,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 680,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 684,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 685,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the dst where the content will be pasted\n",
          "line": 686,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 687,
          "tag": "param"
        }
      ],
      "within": "CArrInfo"
    },
    {
      "comments": "Get the byte offset of the field.",
      "kind": "method",
      "line": 699,
      "name": "offset",
      "tags": [
        {
          "content": "CArrInfo\n",
          "line": 699,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 700,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 701,
          "tag": "method"
        },
        {
          "content": "index The element index\n",
          "line": 705,
          "tag": "param"
        },
        {
          "content": "The byte offset\n",
          "line": 706,
          "tag": "return"
        }
      ],
      "within": "CArrInfo"
    }
  ],
  "CFnInfo": [
    {
      "comments": "The size of a function pointer.\n\nEquivalent to `ffi.c.usize.size`.",
      "kind": "field",
      "line": 720,
      "name": "size",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 720,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 721,
          "tag": "tag"
        },
        {
          "line": 722,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 723,
          "tag": "field"
        }
      ],
      "within": "CFnInfo"
    },
    {
      "comments": "Create a callable from reference.",
      "kind": "method",
      "line": 733,
      "name": "callable",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 733,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 734,
          "tag": "tag"
        },
        {
          "content": "callable\n",
          "line": 735,
          "tag": "method"
        },
        {
          "content": "A callable\n",
          "line": 739,
          "tag": "return"
        }
      ],
      "within": "CFnInfo"
    },
    {
      "comments": "Create a closure from lua function.\n\nTo return some data, lua function should write value into ret reference.",
      "kind": "method",
      "line": 743,
      "name": "closure",
      "tags": [
        {
          "content": "CFnInfo\n",
          "line": 743,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 744,
          "tag": "tag"
        },
        {
          "content": "closure\n",
          "line": 745,
          "tag": "method"
        },
        {
          "content": "A closure\n",
          "line": 751,
          "tag": "return"
        }
      ],
      "within": "CFnInfo"
    }
  ],
  "CPtrInfo": [
    {
      "comments": "The size of a pointer. should be the same for all pointers.\n\nEquivalent to `ffi.c.usize.size`.",
      "kind": "field",
      "line": 499,
      "name": "size",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 499,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 500,
          "tag": "tag"
        },
        {
          "line": 501,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 502,
          "tag": "field"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "The inner type of the pointer.",
      "kind": "field",
      "line": 510,
      "name": "inner",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 510,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 511,
          "tag": "tag"
        },
        {
          "line": 512,
          "tag": "readonly"
        },
        {
          "content": "inner\n",
          "line": 513,
          "tag": "field"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Create an array subtype with specific length.",
      "kind": "method",
      "line": 522,
      "name": "arr",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 522,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 523,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 524,
          "tag": "method"
        },
        {
          "content": "length The length of the array\n",
          "line": 528,
          "tag": "param"
        },
        {
          "content": "An array subtype\n",
          "line": 529,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 534,
      "name": "ptr",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 534,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 535,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 536,
          "tag": "method"
        },
        {
          "content": "A pointer subtype\n",
          "line": 540,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Read address from data, then return RefData.\n\nUseful when reading pointer fields of structures.\n\nIf the `ref` argument is given, rather than create new RefData, update it.",
      "kind": "method",
      "line": 546,
      "name": "readRef",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 546,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 547,
          "tag": "tag"
        },
        {
          "content": "readRef\n",
          "line": 548,
          "tag": "method"
        },
        {
          "content": "target Target data to read address from\n",
          "line": 556,
          "tag": "param"
        },
        {
          "content": "offset Offset to read address from\n",
          "line": 557,
          "tag": "param"
        },
        {
          "content": "ref RefData to update\n",
          "line": 558,
          "tag": "param"
        },
        {
          "content": "A lua value\n",
          "line": 559,
          "tag": "return"
        }
      ],
      "within": "CPtrInfo"
    },
    {
      "comments": "Write address to data.\n\t\nUseful when writing pointer fields of structures.",
      "kind": "method",
      "line": 568,
      "name": "writeRef",
      "tags": [
        {
          "content": "CPtrInfo\n",
          "line": 568,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 569,
          "tag": "tag"
        },
        {
          "content": "writeRef\n",
          "line": 570,
          "tag": "method"
        },
        {
          "content": "target Target data to write address into\n",
          "line": 576,
          "tag": "param"
        },
        {
          "content": "ref Memory address to write\n",
          "line": 577,
          "tag": "param"
        },
        {
          "content": "offset Offset to write address into\n",
          "line": 578,
          "tag": "param"
        }
      ],
      "within": "CPtrInfo"
    }
  ],
  "CStructInfo": [
    {
      "comments": "The size of a struct, including padding.",
      "kind": "field",
      "line": 763,
      "name": "size",
      "tags": [
        {
          "content": "CStructInfo\n",
          "line": 763,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 764,
          "tag": "tag"
        },
        {
          "line": 765,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 766,
          "tag": "field"
        }
      ],
      "within": "CStructInfo"
    }
  ],
  "CSturctInfo": [
    {
      "comments": "Create a struct array type.",
      "kind": "method",
      "line": 774,
      "name": "arr",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 774,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 775,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 776,
          "tag": "method"
        },
        {
          "content": "length The length of the array\n",
          "line": 780,
          "tag": "param"
        },
        {
          "content": "A struct array type\n",
          "line": 781,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Create a struct pointer type.",
      "kind": "method",
      "line": 785,
      "name": "ptr",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 785,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 786,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 787,
          "tag": "method"
        },
        {
          "content": "A struct pointer type\n",
          "line": 791,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Create a box with initial value.",
      "kind": "method",
      "line": 797,
      "name": "box",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 797,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 798,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 799,
          "tag": "method"
        },
        {
          "content": "table The array of field values\n",
          "line": 803,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 804,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Read a lua table from reference or box.",
      "kind": "method",
      "line": 808,
      "name": "readData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 808,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 809,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 810,
          "tag": "method"
        },
        {
          "content": "target Target to read data from\n",
          "line": 814,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 815,
          "tag": "param"
        },
        {
          "content": "A table\n",
          "line": 816,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Write a lua table into reference or box.",
      "kind": "method",
      "line": 820,
      "name": "writeData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 820,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 821,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 822,
          "tag": "method"
        },
        {
          "content": "target Target to write data into\n",
          "line": 826,
          "tag": "param"
        },
        {
          "content": "table Lua data to write\n",
          "line": 827,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 828,
          "tag": "param"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 837,
      "name": "copyData",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 837,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 838,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 839,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 843,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 844,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 845,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 846,
          "tag": "param"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Get the field offset.",
      "kind": "method",
      "line": 858,
      "name": "offset",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 858,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 859,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 860,
          "tag": "method"
        },
        {
          "content": "index The field index\n",
          "line": 864,
          "tag": "param"
        },
        {
          "content": "The byte offset\n",
          "line": 865,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    },
    {
      "comments": "Get the field type.",
      "kind": "method",
      "line": 869,
      "name": "field",
      "tags": [
        {
          "content": "CSturctInfo\n",
          "line": 869,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 870,
          "tag": "tag"
        },
        {
          "content": "field\n",
          "line": 871,
          "tag": "method"
        },
        {
          "content": "index The field index\n",
          "line": 875,
          "tag": "param"
        },
        {
          "content": "The field type\n",
          "line": 876,
          "tag": "return"
        }
      ],
      "within": "CSturctInfo"
    }
  ],
  "CTypeInfo": [
    {
      "comments": "The size of the type in bytes.",
      "kind": "field",
      "line": 356,
      "name": "size",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 356,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 357,
          "tag": "tag"
        },
        {
          "line": 358,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 359,
          "tag": "field"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "The signedness of the type.",
      "kind": "field",
      "line": 365,
      "name": "signedness",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 365,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 366,
          "tag": "tag"
        },
        {
          "line": 367,
          "tag": "readonly"
        },
        {
          "content": "signedness\n",
          "line": 368,
          "tag": "field"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create a pointer subtype.",
      "kind": "method",
      "line": 376,
      "name": "ptr",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 376,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 377,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 378,
          "tag": "method"
        },
        {
          "content": "A pointer subtype\n",
          "line": 382,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create an array subtype with specific length.",
      "kind": "method",
      "line": 386,
      "name": "arr",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 386,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 387,
          "tag": "tag"
        },
        {
          "content": "arr\n",
          "line": 388,
          "tag": "method"
        },
        {
          "content": "length The length of the array\n",
          "line": 392,
          "tag": "param"
        },
        {
          "content": "An array subtype\n",
          "line": 393,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Create a box with initial values.",
      "kind": "method",
      "line": 399,
      "name": "box",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 399,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 400,
          "tag": "tag"
        },
        {
          "content": "box\n",
          "line": 401,
          "tag": "method"
        },
        {
          "content": "table The array of element values\n",
          "line": 405,
          "tag": "param"
        },
        {
          "content": "A box\n",
          "line": 406,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Read a lua value from reference or box.",
      "kind": "method",
      "line": 410,
      "name": "readData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 410,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 411,
          "tag": "tag"
        },
        {
          "content": "readData\n",
          "line": 412,
          "tag": "method"
        },
        {
          "content": "target Target to read data from\n",
          "line": 416,
          "tag": "param"
        },
        {
          "content": "offset Offset to read data from\n",
          "line": 417,
          "tag": "param"
        },
        {
          "content": "A lua value\n",
          "line": 418,
          "tag": "return"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Write a lua value into reference or box.",
      "kind": "method",
      "line": 422,
      "name": "writeData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 422,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 423,
          "tag": "tag"
        },
        {
          "content": "writeData\n",
          "line": 424,
          "tag": "method"
        },
        {
          "content": "target Target to write data into\n",
          "line": 428,
          "tag": "param"
        },
        {
          "content": "value Lua data to write\n",
          "line": 429,
          "tag": "param"
        },
        {
          "content": "offset Offset to write data into\n",
          "line": 430,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Copy values from the source and paste them into the target.",
      "kind": "method",
      "line": 434,
      "name": "copyData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 434,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 435,
          "tag": "tag"
        },
        {
          "content": "copyData\n",
          "line": 436,
          "tag": "method"
        },
        {
          "content": "dst Where the content will be pasted\n",
          "line": 440,
          "tag": "param"
        },
        {
          "content": "src The source data\n",
          "line": 441,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 442,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 443,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Stringify data. Useful when output numbers, which Luau can't handle.",
      "kind": "method",
      "line": 453,
      "name": "stringifyData",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 453,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 454,
          "tag": "tag"
        },
        {
          "content": "stringifyData\n",
          "line": 455,
          "tag": "method"
        },
        {
          "content": "target The target data\n",
          "line": 459,
          "tag": "param"
        },
        {
          "content": "offset Offset to stringify data from\n",
          "line": 460,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    },
    {
      "comments": "Casting data to different type.\n\nMay result in loss of precision.",
      "kind": "method",
      "line": 467,
      "name": "cast",
      "tags": [
        {
          "content": "CTypeInfo\n",
          "line": 467,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 468,
          "tag": "tag"
        },
        {
          "content": "cast\n",
          "line": 469,
          "tag": "method"
        },
        {
          "content": "intoType The target type to convert to\n",
          "line": 475,
          "tag": "param"
        },
        {
          "content": "fromData Source data to be converted\n",
          "line": 476,
          "tag": "param"
        },
        {
          "content": "intoData Target to write converted data into\n",
          "line": 477,
          "tag": "param"
        },
        {
          "content": "fromOffset The offset in the source data\n",
          "line": 478,
          "tag": "param"
        },
        {
          "content": "intoOffset The offset in the destination\n",
          "line": 479,
          "tag": "param"
        }
      ],
      "within": "CTypeInfo"
    }
  ],
  "CTypes": {
    "self": {
      "comments": "All possible C types.",
      "kind": "class",
      "line": 1133,
      "name": "CTypes",
      "tags": [
        {
          "content": "CTypes\n",
          "line": 1133,
          "tag": "class"
        }
      ],
      "within": "CTypes"
    }
  },
  "CVoidInfo": [
    {
      "comments": "The size of the void type. It is always 0.",
      "kind": "field",
      "line": 888,
      "name": "size",
      "tags": [
        {
          "content": "CVoidInfo\n",
          "line": 888,
          "tag": "within"
        },
        {
          "content": "Field\n",
          "line": 889,
          "tag": "tag"
        },
        {
          "line": 890,
          "tag": "readonly"
        },
        {
          "content": "size\n",
          "line": 891,
          "tag": "field"
        }
      ],
      "within": "CVoidInfo"
    },
    {
      "comments": "Create a generic pointer type.",
      "kind": "method",
      "line": 899,
      "name": "ptr",
      "tags": [
        {
          "content": "CVoidInfo\n",
          "line": 899,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 900,
          "tag": "tag"
        },
        {
          "content": "ptr\n",
          "line": 901,
          "tag": "method"
        },
        {
          "content": "Generic pointer type, equivalent to `*void` in C.\n",
          "line": 905,
          "tag": "return"
        }
      ],
      "within": "CVoidInfo"
    }
  ],
  "CallableData": {
    "self": {
      "comments": "A callable external function.\n\nTo call external function, provide memory for save the return value and references for the arguments.\n\nIf return type is `void`, pass `nil`.",
      "kind": "class",
      "line": 310,
      "name": "CallableData",
      "tags": [
        {
          "content": "CallableData\n",
          "line": 310,
          "tag": "class"
        }
      ],
      "within": "CallableData"
    }
  },
  "ClosureData": [
    {
      "comments": "Create a reference of the closure. usually can be used for passing function pointer as argument.\n\nThe created reference keeps the closure from being garbage collected until the reference itself is collected.",
      "kind": "method",
      "line": 333,
      "name": "ref",
      "tags": [
        {
          "content": "ClosureData\n",
          "line": 333,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 334,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 335,
          "tag": "method"
        },
        {
          "content": "A reference of the closure\n",
          "line": 341,
          "tag": "return"
        }
      ],
      "within": "ClosureData"
    }
  ],
  "FFI": [
    {
      "comments": "Namespace for compile time sized c types.",
      "kind": "prop",
      "line": 54,
      "name": "C C",
      "tags": [
        {
          "content": "C C\n",
          "line": 54,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 55,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 8-bit sized unsigned integer, Equivalent to `uint8_t` in `stdint`.",
      "kind": "prop",
      "line": 914,
      "name": "u8 CTypeInfo",
      "tags": [
        {
          "content": "u8 CTypeInfo\n",
          "line": 914,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 915,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 16-bit sized unsigned integer, Equivalent to `uint16_t` in `stdint`.",
      "kind": "prop",
      "line": 922,
      "name": "u16 CTypeInfo",
      "tags": [
        {
          "content": "u16 CTypeInfo\n",
          "line": 922,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 923,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 32-bit sized unsigned integer, Equivalent to `uint32_t` in `stdint`.",
      "kind": "prop",
      "line": 930,
      "name": "u32 CTypeInfo",
      "tags": [
        {
          "content": "u32 CTypeInfo\n",
          "line": 930,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 931,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 64-bit sized unsigned integer, Equivalent to `uint64_t` in `stdint`.",
      "kind": "prop",
      "line": 938,
      "name": "u64 CTypeInfo",
      "tags": [
        {
          "content": "u64 CTypeInfo\n",
          "line": 938,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 939,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 128-bit sized unsigned integer, Equivalent to `uint128_t` in `stdint`.",
      "kind": "prop",
      "line": 946,
      "name": "u128 CTypeInfo",
      "tags": [
        {
          "content": "u128 CTypeInfo\n",
          "line": 946,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 947,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 8-bit sized signed integer, Equivalent to `int8_t` in `stdint`.",
      "kind": "prop",
      "line": 954,
      "name": "i8 CTypeInfo",
      "tags": [
        {
          "content": "i8 CTypeInfo\n",
          "line": 954,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 955,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 16-bit sized signed integer, Equivalent to `int16_t` in `stdint`.",
      "kind": "prop",
      "line": 962,
      "name": "i16 CTypeInfo",
      "tags": [
        {
          "content": "i16 CTypeInfo\n",
          "line": 962,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 963,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 32-bit sized signed integer, Equivalent to `int32_t` in `stdint`.",
      "kind": "prop",
      "line": 970,
      "name": "i32 CTypeInfo",
      "tags": [
        {
          "content": "i32 CTypeInfo\n",
          "line": 970,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 971,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 64-bit sized signed integer, Equivalent to `int64_t` in `stdint`.",
      "kind": "prop",
      "line": 978,
      "name": "i64 CTypeInfo",
      "tags": [
        {
          "content": "i64 CTypeInfo\n",
          "line": 978,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 979,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A 128-bit sized signed integer, Equivalent to `int128_t` in `stdint`.",
      "kind": "prop",
      "line": 986,
      "name": "i128 CTypeInfo",
      "tags": [
        {
          "content": "i128 CTypeInfo\n",
          "line": 986,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 987,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A single-precision 32-bit sized floating-point, Almost always equivalent to `float` in C.",
      "kind": "prop",
      "line": 994,
      "name": "f32 CTypeInfo",
      "tags": [
        {
          "content": "f32 CTypeInfo\n",
          "line": 994,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 995,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A double-precision 64-bit sized floating-point, Almost always equivalent to `double` in C.",
      "kind": "prop",
      "line": 1002,
      "name": "f64 CTypeInfo",
      "tags": [
        {
          "content": "f64 CTypeInfo\n",
          "line": 1002,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1003,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A machine specific pointer sized unsigned integer.",
      "kind": "prop",
      "line": 1010,
      "name": "usize CTypeInfo",
      "tags": [
        {
          "content": "usize CTypeInfo\n",
          "line": 1010,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1011,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "A machine specific pointer sized signed integer.",
      "kind": "prop",
      "line": 1018,
      "name": "isize CTypeInfo",
      "tags": [
        {
          "content": "isize CTypeInfo\n",
          "line": 1018,
          "tag": "prop"
        },
        {
          "content": "FFI\n",
          "line": 1019,
          "tag": "within"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Create a `Ref` with address 0.\n\nCan be used for receive a pointer from external function or pass it as an argument.",
      "kind": "function",
      "line": 1195,
      "name": "nullRef",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1195,
          "tag": "within"
        },
        {
          "content": "A zero initialized Ref\n",
          "line": 1201,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Create a `Box` with specific size.\nThe created box is not filed with zero.",
      "kind": "function",
      "line": 1208,
      "name": "box",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1208,
          "tag": "within"
        },
        {
          "content": "size The size of the new box\n",
          "line": 1213,
          "tag": "param"
        },
        {
          "content": "A allocated box\n",
          "line": 1214,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Open a dynamic library.",
      "kind": "function",
      "line": 1221,
      "name": "open",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1221,
          "tag": "within"
        },
        {
          "content": "name The name of the target library\n",
          "line": 1225,
          "tag": "param"
        },
        {
          "content": "A dynamic library handle\n",
          "line": 1226,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Return `true` if the second argument is an integer (i32).",
      "kind": "function",
      "line": 1233,
      "name": "isInteger",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1233,
          "tag": "within"
        },
        {
          "content": "val A lua value to check\n",
          "line": 1237,
          "tag": "param"
        },
        {
          "content": "Whether val is an integer or not\n",
          "line": 1238,
          "tag": "return"
        }
      ],
      "within": "FFI"
    },
    {
      "comments": "Free referenced memory.",
      "kind": "function",
      "line": 1245,
      "name": "free",
      "tags": [
        {
          "content": "FFI\n",
          "line": 1245,
          "tag": "within"
        },
        {
          "content": "data Target memory to free\n",
          "line": 1249,
          "tag": "param"
        }
      ],
      "within": "FFI"
    }
  ],
  "LibData": [
    {
      "comments": "Find a symbol from the dynamic library.",
      "kind": "method",
      "line": 297,
      "name": "find",
      "tags": [
        {
          "content": "LibData\n",
          "line": 297,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 298,
          "tag": "tag"
        },
        {
          "content": "find\n",
          "line": 299,
          "tag": "method"
        },
        {
          "content": "sym The name of the symbol\n",
          "line": 303,
          "tag": "param"
        },
        {
          "content": "A `Ref` of the found symbol\n",
          "line": 304,
          "tag": "return"
        }
      ],
      "within": "LibData"
    }
  ],
  "RefData": [
    {
      "comments": "Create a RefData by dereference this reference.\nThe created reference has no boundaries and has no restrictions.\n\nThis method is unsafe.",
      "kind": "method",
      "line": 71,
      "name": "deref",
      "tags": [
        {
          "content": "RefData\n",
          "line": 71,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 72,
          "tag": "tag"
        },
        {
          "content": "deref\n",
          "line": 73,
          "tag": "method"
        },
        {
          "content": "A dereferenced `RefData`\n",
          "line": 80,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference with specific offset from this reference.\n\nThe created reference can be GCed and holds same data.",
      "kind": "method",
      "line": 84,
      "name": "offset",
      "tags": [
        {
          "content": "RefData\n",
          "line": 84,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 85,
          "tag": "tag"
        },
        {
          "content": "offset\n",
          "line": 86,
          "tag": "method"
        },
        {
          "content": "offset Create a reference at the given offset\n",
          "line": 92,
          "tag": "param"
        },
        {
          "content": "A offseted reference\n",
          "line": 93,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference of this reference.\n\nThe created reference keeps the target reference from being garbage collected until created reference itself is collected.",
      "kind": "method",
      "line": 97,
      "name": "ref",
      "tags": [
        {
          "content": "RefData\n",
          "line": 97,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 98,
          "tag": "tag"
        },
        {
          "content": "ref\n",
          "line": 99,
          "tag": "method"
        },
        {
          "content": "A reference of this reference\n",
          "line": 105,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Create a reference of this reference after leaking it.\n\nGC doesn't manage destruction after this action. You must free it later.",
      "kind": "method",
      "line": 109,
      "name": "leak",
      "tags": [
        {
          "content": "RefData\n",
          "line": 109,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 110,
          "tag": "tag"
        },
        {
          "content": "leak\n",
          "line": 111,
          "tag": "method"
        },
        {
          "content": "A reference of this reference\n",
          "line": 117,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Check reference is null or not.",
      "kind": "method",
      "line": 121,
      "name": "isNull",
      "tags": [
        {
          "content": "RefData\n",
          "line": 121,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 122,
          "tag": "tag"
        },
        {
          "content": "isNull\n",
          "line": 123,
          "tag": "method"
        },
        {
          "content": "Whether reference is null or not\n",
          "line": 127,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Copy content from another data with specific length.",
      "kind": "method",
      "line": 131,
      "name": "copyFrom",
      "tags": [
        {
          "content": "RefData\n",
          "line": 131,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 132,
          "tag": "tag"
        },
        {
          "content": "copyFrom\n",
          "line": 133,
          "tag": "method"
        },
        {
          "content": "src The source data\n",
          "line": 137,
          "tag": "param"
        },
        {
          "content": "length The amount of data to copy, in bytes\n",
          "line": 138,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 139,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source data from where the content will be copied\n",
          "line": 140,
          "tag": "param"
        },
        {
          "content": "`RefData` itself for convenience\n",
          "line": 141,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Read string from data with specific length without null termination.",
      "kind": "method",
      "line": 151,
      "name": "readString",
      "tags": [
        {
          "content": "RefData\n",
          "line": 151,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 152,
          "tag": "tag"
        },
        {
          "content": "readString\n",
          "line": 153,
          "tag": "method"
        },
        {
          "content": "length The amount of data to read, in bytes\n",
          "line": 157,
          "tag": "param"
        },
        {
          "content": "offset Offset to read string from\n",
          "line": 158,
          "tag": "param"
        },
        {
          "content": "A string\n",
          "line": 159,
          "tag": "return"
        }
      ],
      "within": "RefData"
    },
    {
      "comments": "Write string into data without null termination.",
      "kind": "method",
      "line": 163,
      "name": "writeString",
      "tags": [
        {
          "content": "RefData\n",
          "line": 163,
          "tag": "within"
        },
        {
          "content": "Method\n",
          "line": 164,
          "tag": "tag"
        },
        {
          "content": "writeString\n",
          "line": 165,
          "tag": "method"
        },
        {
          "content": "src The source string\n",
          "line": 169,
          "tag": "param"
        },
        {
          "content": "length The amount of data to write, in bytes\n",
          "line": 170,
          "tag": "param"
        },
        {
          "content": "dstOffset The offset in the destination where the content will be pasted\n",
          "line": 171,
          "tag": "param"
        },
        {
          "content": "srcOffset The offset in the source string from where the content will be copied\n",
          "line": 172,
          "tag": "param"
        },
        {
          "content": "`RefData` itself for convenience\n",
          "line": 173,
          "tag": "return"
        }
      ],
      "within": "RefData"
    }
  ]
}